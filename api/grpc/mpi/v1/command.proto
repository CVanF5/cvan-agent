// Copyright (c) F5, Inc.
//
// This source code is licensed under the Apache License, Version 2.0 license found in the
// LICENSE file in the root directory of this source tree.

// These proto definitions follow https://protobuf.dev/programming-guides/style/
// and recommendations outlined in https://static.sched.com/hosted_files/kccncna17/ad/2017%20CloudNativeCon%20-%20Mod%20gRPC%20Services.pdf
syntax = "proto3";
package mpi.v1;

option go_package = "github.com/nginx/agent/v3/api/grpc/mpi/v1";

import "mpi/v1/common.proto";
import "mpi/v1/file.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

// A service outlining the command and control options for a DataPlane Client
// All operations are written from a client perspective
// The RPC calls generally flow Client -> Server, except for Subscribe which contains a bidirectional stream
// The ManagementPlaneRequest sent in the Subscribe stream triggers one or more client actions.
// Messages provided by the Management Plane must be a FIFO ordered queue. Messages in the queue must have a monotonically-increasing integer index. 
// The indexes do not need to be sequential. The index must be a 64-bit signed integer.
// The index must not reset for the entire lifetime of a unique Agent (i.e. the index does not reset to 0 only because of a temporary disconnection or new session). 
// Messages must not be removed from the Management Plane queue until Ack’d by the Agent. 
// Messages sent but not yet Ack’d must be kept in an “in-flight” buffer as they may need to be retried.
service CommandService {
    // Connects NGINX Agent to the Management Plane agnostic of instance data
    rpc CreateConnection(CreateConnectionRequest) returns (CreateConnectionResponse) {}
    // Reports on instances and their configurations
    rpc UpdateDataPlaneStatus(UpdateDataPlaneStatusRequest) returns (UpdateDataPlaneStatusResponse) {}
    // Reports on instance health
    rpc UpdateDataPlaneHealth(UpdateDataPlaneHealthRequest) returns (UpdateDataPlaneHealthResponse) {}
    // A decoupled communication mechanism between the data plane and management plane.
    // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
    // buf:lint:ignore RPC_REQUEST_STANDARD_NAME
    rpc Subscribe(stream DataPlaneResponse) returns (stream ManagementPlaneRequest) {}
}

// The connection request is an intial handshake to establish a connection, sending NGINX Agent instance information
message CreateConnectionRequest {
    // Meta-information associated with a message
    mpi.v1.MessageMeta message_meta = 1;
    // instance and infrastructure information associated with the NGINX Agent
    Resource resource = 2;
}

// A representation of instances and runtime resource information
message Resource {
    // A resource identifier
    string id = 1;
    // A list of instances associated with this resource
    repeated Instance instances = 2;
    // Runtime information of where the instances reside. Host or container based
    oneof info {
        // if running on bare-metal, provides additional information
        HostInfo host_info = 3;
        // if running in a contanierized environment, provides additional information
        ContainerInfo container_info = 4;
    }
}

// Represents the host system information
message HostInfo {
    // the host identifier
    string id = 1;
    // the name of the host
    string hostname = 2;
    // Release information of the host
    ReleaseInfo release_info = 3;
}

// Release information of the host
message ReleaseInfo {
    // OS type (e.g. freebsd, linux, etc)
    string codename = 1;
    // OS name (e.g. ubuntu, linuxmint, etc)
    string id = 2;
    // OS family (e.g. debian, rhel)
    string name = 3;
    // Version of the OS kernel
    string version_id = 4;
    // Version of the OS
    string version = 5;
}

// Container information
message ContainerInfo {
    // the container identifier
    string container_id = 1;
    // the image name. Need to determine if this is possible
    string image = 2;
}

// This contains a series of NGINX Agent configurations
message AgentConfig { 
    // Command server settings
    Command command = 1;
    // Metrics server settings
    Metrics metrics = 2;
    // A series of key/value pairs to add more data to the NGINX Agent instance
    repeated google.protobuf.Struct labels = 3;
    // A list of features that the NGINX Agent has
    repeated string features = 4;
    // Message buffer size, maximum not acknowledged messages from the subscribe perspective
    string message_buffer_size = 5;
}

// The command settings, associated with messaging from an external source 
message Command {
    // The connection and security settingss for the command server
    ConnectionSettings connection_settings = 1;
}

// The metrics settings associated with orgins (sources) of the metrics and destinations (exporter)
message Metrics {
    // The connection and security settingss for the sources
    repeated Source sources = 1;
    // The connection and security settingss for the exporters server
    repeated Exporter exporters = 2;
    // the local buffer size that we will cache if connectivity issues exist
    string bulk_size = 3;
}

// A source configuration
message Source {
    // how often to collect data from a particular source. In google.protobuf.Timestamp format
    google.protobuf.Timestamp collection_interval = 1;
    // connection information to connect to a particular source
    ConnectionSettings connection_settings = 2;
}

// A destination configuration
message Exporter {
    // how often to report in google.protobuf.Timestamp format
    google.protobuf.Timestamp report_interval = 1;
    // connection information to send data to a particular destination
    ConnectionSettings connection_settings = 2;
}

// A set of connection information and it's associated auth, tls and backoff configurations
message ConnectionSettings {
    // Server settings that include connection information
    Server server = 1;
    // Authentication settings
    Auth auth = 2;
    // Optional TLS settings
    TLSSetting tls = 3;
    // keepalive settings for this connection
    KeepAlive keep_alive = 4;
}

// Server settings like hostname
message Server {
    // the host information
    string host = 1;
    // the port information
    int32 port = 2;
    // Connection Type enumeration
    enum ConnectionType {
        // Default connection type
        CONNECTION_TYPE_UNSPECIFIED = 0;
        // HTTP connection type
        CONNECTION_TYPE_HTTP = 1;
        // gRPC connection type
        CONNECTION_TYPE_GRPC = 2;
        // unix socket connection type
        CONNECTION_TYPE_UNIX = 3;
    }
    // Specific connection type
    ConnectionType connection_type = 3;
}

// Authentication settings
message Auth {
    // A token
    string token = 1;
}

message TLSSetting {
    // enable tls
    bool enable      = 1;
    // tls cert
    string cert      = 2;
    // tls key
    string key       = 3;
    // certificate authoirty cert
    string ca        = 4;
    // enable verification of a server's certificate chain and host name
    bool skip_verify = 5;
}

// keepalive settings based on https://pkg.go.dev/google.golang.org/grpc/keepalive#ClientParameters
message KeepAlive {
	// After a duration of this time if the client doesn't see any activity it
	// pings the server to see if the transport is still alive.
	// If set below 10s, a minimum value of 10s will be used instead.
    google.protobuf.Timestamp time = 1;
	// After having pinged for keepalive check, the client waits for a duration
	// of Timeout and if no activity is seen even after that the connection is closed.
    double timeout = 2;
	// If true, client sends keepalive pings even with no active RPCs. If false,
	// when there are no active RPCs, Time and Timeout will be ignored and no
	// keepalive pings will be sent.
    bool permit_without_stream = 3;
}

// A set of runtime NGINX OSS settings
message NGINXRuntimeInfo {
    // the stub status API location
    string stub_status = 1;
    // a list of access_logs
    repeated string access_logs = 2;
    // a list of error_logs
    repeated string error_logs = 3;
    // List of NGINX potentially lodable modules (installed but not loaded).
    repeated string loadable_modules = 4;
    // List of NGINX dynamic modules.
    repeated string dynamic_modules = 5;
}

// A set of runtime NGINX Plus settings
message NGINXPlusRuntimeInfo {
    // the stub status API location
    string stub_status = 1;
    // a list of access_logs
    repeated string access_logs = 2;
    // a list of error_logs
    repeated string error_logs = 3;
    // List of NGINX potentially lodable modules (installed but not loaded).
    repeated string loadable_modules = 4;
    // List of NGINX dynamic modules.
    repeated string dynamic_modules = 5;
    // the plus API location
    string plus_api = 6;
}

// A response to a CreateConnectionRequest
message CreateConnectionResponse {
    // the success or failure of the CreateConnectionRequest
    mpi.v1.CommandResponse response = 1;
    // the recommendation NGINX Agent configurations provided by the ManagementPlane
    AgentConfig agent_config = 2;
}

// Report on the status of the Data Plane
message UpdateDataPlaneStatusRequest {
    // Meta-information associated with a message
    mpi.v1.MessageMeta message_meta = 1;
    // the reresentation of a data plane
    Resource resource = 2;
    // The AckIndex latest message index that has been processed
    string latest_message_index = 3;
}

// Respond to a UpdateDataPlaneStatusRequest - intentionally empty
message UpdateDataPlaneStatusResponse {}

// This represents an instance being reported on
message Instance {
    // Meta-information associated with an instance
    InstanceMeta instance_meta = 1;
    // Read and write configuration associated with an instance that can be modified via this API
    InstanceConfig instance_config = 2;
    // Read-only meta data associated with the instance running in it's environment
    InstanceRuntime instance_runtime = 3;
}

// Instance Configuration options
message InstanceConfig {
    // provided actions associated with a particular instance. These are runtime based and provided by a particular version of the NGINX Agent
    repeated InstanceAction actions = 1;
    oneof config {
        // NGINX Agent runtime configuration settings
        AgentConfig agent_config = 2;
    }
}

// A set of actions that can be performed on an instance
message InstanceAction {
    enum InstanceActionType {
        // Default action
        INSTANCE_ACTION_TYPE_UNSPECIFIED = 0;
    }
    InstanceActionType action_type = 1;
}

message InstanceRuntime {
    // the process identifier
    string process_id = 1;
    // the binary path location
    string binary_path = 2;
    // more detailed runtime objects
    oneof details {
        // NGINX runtime configuration settings like stub_status, usually read from the NGINX config or NGINX process
        NGINXRuntimeInfo nginx_runtime_info = 3;
        // NGINX Plus runtime configuration settings like api value, usually read from the NGINX config, NGINX process or NGINX Plus API
        NGINXPlusRuntimeInfo nginx_plus_runtime_info = 4;
    }
}

// Report on the health of a particular instance
message InstanceHealth {
    // Health status enum
    enum InstanceHealthStatus {
        // Unspecified status
        INSTANCE_HEALTH_STATUS_UNSPECIFIED = 0;
        // Healthy status
        INSTANCE_HEALTH_STATUS_HEALTHY = 1;
        // Unhealthy status
        INSTANCE_HEALTH_STATUS_UNHEALTHY = 2;
        // Degraded status
        INSTANCE_HEALTH_STATUS_DEGRADED = 3;
    }
    string instance_id = 1;
    // Health status
    InstanceHealthStatus instance_health_status = 2;
    // Provides a human readable context around why a health status is a particular state
    string description = 3;
}

// Metainformation relating to the reported instance
message InstanceMeta {
    // the identifier associated with the instance
    string instance_id = 1;
    // the types of instances possible
    enum InstanceType {
        // Unspecified instance type
        INSTANCE_TYPE_UNSPECIFIED = 0;
        // NGINX Agent
        INSTANCE_TYPE_AGENT = 1;
        // NGINX
        INSTANCE_TYPE_NGINX = 2;
        // NGINX Plus
        INSTANCE_TYPE_NGINX_PLUS = 3;
        // NGINX Unit
        INSTANCE_TYPE_UNIT = 4;
    }
    // the types of instances possible
    InstanceType instance_type = 2;
    // the version of the instance
    string version = 3;
    // the id of the assoicated resource with this instance
    string resource_id = 4;
}

// Health report of a set of instances
message UpdateDataPlaneHealthRequest {
    // Meta-information associated with a message
    mpi.v1.MessageMeta message_meta = 1;
    // Health report of a set of instances
    repeated InstanceHealth instance_healths = 2;
}

// Response to a UpdateDataPlaneHealthRequest - intentionally empty
message UpdateDataPlaneHealthResponse {}

// Reports the status of an associated command. This may be in response to a ManagementPlaneRequest
message DataPlaneResponse {
    // Meta-information associated with a message
    mpi.v1.MessageMeta message_meta = 1;
    // The command response with the associated request
    mpi.v1.CommandResponse command_response = 2;
}

// A Management Plane request for information, triggers an associated rpc on the DataPlane
message ManagementPlaneRequest {
    // Meta-information associated with a message
    mpi.v1.MessageMeta message_meta = 1;
    oneof request {
        // triggers a DataPlaneStatus rpc
        StatusRequest status_request = 2;              
        // triggers a DataPlaneHealth rpc
        HealthRequest health_request = 3;               
        // triggers a rpc GetFile(FileRequest) for overview list, 
        // if overview is missing, triggers a rpc GetOverview(ConfigVersion) first
        ConfigApplyRequest config_apply_request = 5;
        // triggers a series of rpc UpdateFile(File) for that instances
        ConfigUploadRequest config_upload_request = 6;
        // triggers a DataPlaneResponse with a command_response for a particular action
        APIActionRequest action_request = 7;
        // triggers a DataPlaneResponse with a command_response for a particular correlation_id
        CommandStatusRequest command_status_request = 8; 
    }
}

// Additional information associated with a StatusRequest
message StatusRequest {}

// Additional information associated with a HealthRequest
message HealthRequest {}

// Additional information associated with a ConfigApplyRequest
message ConfigApplyRequest {
    // the config version
    mpi.v1.ConfigVersion config_version = 1;
    // an optional set of files related to the request
    optional mpi.v1.FileOverview overview = 2;
}

message ConfigSyncRequest {
    // the config version
    mpi.v1.ConfigVersion config_version = 1;
    // an optional set of files related to the request
    optional mpi.v1.FileOverview overview = 2;
}

// Additional information associated with a ConfigUploadRequest
message ConfigUploadRequest {
    // the instance identifier
    string instance_id = 1;
    // an optional set of files related to the request
    optional mpi.v1.FileOverview overview = 2;
}

// Perform an associated API action on an instance
message APIActionRequest {
    // the instance identifier
    string instance_id = 1;
    // the action to be performed on the instance
    InstanceAction action = 2;
    oneof payload {
        // A default action placeholder
        DefaultAction default_action = 3;
    }   
}

// Request an update on a particular command
message CommandStatusRequest {
    // Meta-information associated with a message
    mpi.v1.MessageMeta message_meta = 1;
}

// A default action placeholder
message DefaultAction {
    // a set of key/value pairs where the action is the key and parameters are the values used in the request
    repeated google.protobuf.Struct parameters = 1;
}
