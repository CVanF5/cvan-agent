// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.2
// source: command.proto

package command

import (
	common "github.com/nginx/agent/v3/api/grpc/mpi/v1/common"
	file "github.com/nginx/agent/v3/api/grpc/mpi/v1/file"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InstanceAction_InstanceActions int32

const (
	InstanceAction_UNKNOWN InstanceAction_InstanceActions = 0 // TBD
)

// Enum value maps for InstanceAction_InstanceActions.
var (
	InstanceAction_InstanceActions_name = map[int32]string{
		0: "UNKNOWN",
	}
	InstanceAction_InstanceActions_value = map[string]int32{
		"UNKNOWN": 0,
	}
)

func (x InstanceAction_InstanceActions) Enum() *InstanceAction_InstanceActions {
	p := new(InstanceAction_InstanceActions)
	*p = x
	return p
}

func (x InstanceAction_InstanceActions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstanceAction_InstanceActions) Descriptor() protoreflect.EnumDescriptor {
	return file_command_proto_enumTypes[0].Descriptor()
}

func (InstanceAction_InstanceActions) Type() protoreflect.EnumType {
	return &file_command_proto_enumTypes[0]
}

func (x InstanceAction_InstanceActions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstanceAction_InstanceActions.Descriptor instead.
func (InstanceAction_InstanceActions) EnumDescriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{9, 0}
}

// Health status enum
type InstanceHealth_InstancHealthStatus int32

const (
	// Unknown status
	InstanceHealth_UNKNOWN InstanceHealth_InstancHealthStatus = 0
	// Healthy status
	InstanceHealth_HEALTHY InstanceHealth_InstancHealthStatus = 1
	// Unhealthy status
	InstanceHealth_UNHEALTHY InstanceHealth_InstancHealthStatus = 2
	// Degraded status
	InstanceHealth_DEGRADED InstanceHealth_InstancHealthStatus = 3
)

// Enum value maps for InstanceHealth_InstancHealthStatus.
var (
	InstanceHealth_InstancHealthStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "HEALTHY",
		2: "UNHEALTHY",
		3: "DEGRADED",
	}
	InstanceHealth_InstancHealthStatus_value = map[string]int32{
		"UNKNOWN":   0,
		"HEALTHY":   1,
		"UNHEALTHY": 2,
		"DEGRADED":  3,
	}
)

func (x InstanceHealth_InstancHealthStatus) Enum() *InstanceHealth_InstancHealthStatus {
	p := new(InstanceHealth_InstancHealthStatus)
	*p = x
	return p
}

func (x InstanceHealth_InstancHealthStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstanceHealth_InstancHealthStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_command_proto_enumTypes[1].Descriptor()
}

func (InstanceHealth_InstancHealthStatus) Type() protoreflect.EnumType {
	return &file_command_proto_enumTypes[1]
}

func (x InstanceHealth_InstancHealthStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstanceHealth_InstancHealthStatus.Descriptor instead.
func (InstanceHealth_InstancHealthStatus) EnumDescriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{10, 0}
}

type InstanceMeta_InstanceType int32

const (
	InstanceMeta_UNKNOWN    InstanceMeta_InstanceType = 0
	InstanceMeta_AGENT      InstanceMeta_InstanceType = 1
	InstanceMeta_NGINX_OSS  InstanceMeta_InstanceType = 2
	InstanceMeta_NGINX_PLUS InstanceMeta_InstanceType = 3
	InstanceMeta_UNIT       InstanceMeta_InstanceType = 4
)

// Enum value maps for InstanceMeta_InstanceType.
var (
	InstanceMeta_InstanceType_name = map[int32]string{
		0: "UNKNOWN",
		1: "AGENT",
		2: "NGINX_OSS",
		3: "NGINX_PLUS",
		4: "UNIT",
	}
	InstanceMeta_InstanceType_value = map[string]int32{
		"UNKNOWN":    0,
		"AGENT":      1,
		"NGINX_OSS":  2,
		"NGINX_PLUS": 3,
		"UNIT":       4,
	}
)

func (x InstanceMeta_InstanceType) Enum() *InstanceMeta_InstanceType {
	p := new(InstanceMeta_InstanceType)
	*p = x
	return p
}

func (x InstanceMeta_InstanceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstanceMeta_InstanceType) Descriptor() protoreflect.EnumDescriptor {
	return file_command_proto_enumTypes[2].Descriptor()
}

func (InstanceMeta_InstanceType) Type() protoreflect.EnumType {
	return &file_command_proto_enumTypes[2]
}

func (x InstanceMeta_InstanceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstanceMeta_InstanceType.Descriptor instead.
func (InstanceMeta_InstanceType) EnumDescriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{11, 0}
}

type ManagementPlaneMessage_RequestType int32

const (
	ManagementPlaneMessage_UNKNOWN         ManagementPlaneMessage_RequestType = 0
	ManagementPlaneMessage_STATUS          ManagementPlaneMessage_RequestType = 1
	ManagementPlaneMessage_HEALTH          ManagementPlaneMessage_RequestType = 2
	ManagementPlaneMessage_CONFIG_UPLOAD   ManagementPlaneMessage_RequestType = 3
	ManagementPlaneMessage_CONFIG_DOWNLOAD ManagementPlaneMessage_RequestType = 4
	ManagementPlaneMessage_ACTION          ManagementPlaneMessage_RequestType = 5
)

// Enum value maps for ManagementPlaneMessage_RequestType.
var (
	ManagementPlaneMessage_RequestType_name = map[int32]string{
		0: "UNKNOWN",
		1: "STATUS",
		2: "HEALTH",
		3: "CONFIG_UPLOAD",
		4: "CONFIG_DOWNLOAD",
		5: "ACTION",
	}
	ManagementPlaneMessage_RequestType_value = map[string]int32{
		"UNKNOWN":         0,
		"STATUS":          1,
		"HEALTH":          2,
		"CONFIG_UPLOAD":   3,
		"CONFIG_DOWNLOAD": 4,
		"ACTION":          5,
	}
)

func (x ManagementPlaneMessage_RequestType) Enum() *ManagementPlaneMessage_RequestType {
	p := new(ManagementPlaneMessage_RequestType)
	*p = x
	return p
}

func (x ManagementPlaneMessage_RequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ManagementPlaneMessage_RequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_command_proto_enumTypes[3].Descriptor()
}

func (ManagementPlaneMessage_RequestType) Type() protoreflect.EnumType {
	return &file_command_proto_enumTypes[3]
}

func (x ManagementPlaneMessage_RequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ManagementPlaneMessage_RequestType.Descriptor instead.
func (ManagementPlaneMessage_RequestType) EnumDescriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{14, 0}
}

type ConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageMetadata *common.MessageRequest `protobuf:"bytes,1,opt,name=message_metadata,json=messageMetadata,proto3" json:"message_metadata,omitempty"`
	Agent           *Instance              `protobuf:"bytes,2,opt,name=agent,proto3" json:"agent,omitempty"`
}

func (x *ConnectionRequest) Reset() {
	*x = ConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionRequest) ProtoMessage() {}

func (x *ConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionRequest.ProtoReflect.Descriptor instead.
func (*ConnectionRequest) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{0}
}

func (x *ConnectionRequest) GetMessageMetadata() *common.MessageRequest {
	if x != nil {
		return x.MessageMetadata
	}
	return nil
}

func (x *ConnectionRequest) GetAgent() *Instance {
	if x != nil {
		return x.Agent
	}
	return nil
}

// need to build this out
type AgentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server *Server `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"` // can we connect to more than one management plane?
	// Max NAck setting
	Labels   []*structpb.Struct `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
	Features []string           `protobuf:"bytes,3,rep,name=features,proto3" json:"features,omitempty"`
}

func (x *AgentConfig) Reset() {
	*x = AgentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentConfig) ProtoMessage() {}

func (x *AgentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentConfig.ProtoReflect.Descriptor instead.
func (*AgentConfig) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{1}
}

func (x *AgentConfig) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *AgentConfig) GetLabels() []*structpb.Struct {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *AgentConfig) GetFeatures() []string {
	if x != nil {
		return x.Features
	}
	return nil
}

type Server struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Port     string `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *Server) Reset() {
	*x = Server{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server) ProtoMessage() {}

func (x *Server) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server.ProtoReflect.Descriptor instead.
func (*Server) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{2}
}

func (x *Server) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Server) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

// this to be built out
type NGINXConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BinaryPath string   `protobuf:"bytes,1,opt,name=binary_path,json=binaryPath,proto3" json:"binary_path,omitempty"`
	Hostname   string   `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	IpAddress  string   `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	StubStatus string   `protobuf:"bytes,4,opt,name=stub_status,json=stubStatus,proto3" json:"stub_status,omitempty"`
	AccessLogs []string `protobuf:"bytes,5,rep,name=access_logs,json=accessLogs,proto3" json:"access_logs,omitempty"`
	ErrorLogs  []string `protobuf:"bytes,6,rep,name=error_logs,json=errorLogs,proto3" json:"error_logs,omitempty"`
}

func (x *NGINXConfig) Reset() {
	*x = NGINXConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NGINXConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NGINXConfig) ProtoMessage() {}

func (x *NGINXConfig) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NGINXConfig.ProtoReflect.Descriptor instead.
func (*NGINXConfig) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{3}
}

func (x *NGINXConfig) GetBinaryPath() string {
	if x != nil {
		return x.BinaryPath
	}
	return ""
}

func (x *NGINXConfig) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *NGINXConfig) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *NGINXConfig) GetStubStatus() string {
	if x != nil {
		return x.StubStatus
	}
	return ""
}

func (x *NGINXConfig) GetAccessLogs() []string {
	if x != nil {
		return x.AccessLogs
	}
	return nil
}

func (x *NGINXConfig) GetErrorLogs() []string {
	if x != nil {
		return x.ErrorLogs
	}
	return nil
}

// this to be built out
type NGINXPlusConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BinaryPath string   `protobuf:"bytes,1,opt,name=binary_path,json=binaryPath,proto3" json:"binary_path,omitempty"`
	Hostname   string   `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	IpAddress  string   `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	Api        string   `protobuf:"bytes,4,opt,name=api,proto3" json:"api,omitempty"`
	AccessLogs []string `protobuf:"bytes,5,rep,name=access_logs,json=accessLogs,proto3" json:"access_logs,omitempty"` // is this correct for plus?
	ErrorLogs  []string `protobuf:"bytes,6,rep,name=error_logs,json=errorLogs,proto3" json:"error_logs,omitempty"`    // is this correct for plus?
}

func (x *NGINXPlusConfig) Reset() {
	*x = NGINXPlusConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NGINXPlusConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NGINXPlusConfig) ProtoMessage() {}

func (x *NGINXPlusConfig) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NGINXPlusConfig.ProtoReflect.Descriptor instead.
func (*NGINXPlusConfig) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{4}
}

func (x *NGINXPlusConfig) GetBinaryPath() string {
	if x != nil {
		return x.BinaryPath
	}
	return ""
}

func (x *NGINXPlusConfig) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *NGINXPlusConfig) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *NGINXPlusConfig) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *NGINXPlusConfig) GetAccessLogs() []string {
	if x != nil {
		return x.AccessLogs
	}
	return nil
}

func (x *NGINXPlusConfig) GetErrorLogs() []string {
	if x != nil {
		return x.ErrorLogs
	}
	return nil
}

type ConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response    *common.CommandResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	AgentConfig *AgentConfig            `protobuf:"bytes,2,opt,name=agent_config,json=agentConfig,proto3" json:"agent_config,omitempty"`
}

func (x *ConnectionResponse) Reset() {
	*x = ConnectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionResponse) ProtoMessage() {}

func (x *ConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionResponse.ProtoReflect.Descriptor instead.
func (*ConnectionResponse) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{5}
}

func (x *ConnectionResponse) GetResponse() *common.CommandResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ConnectionResponse) GetAgentConfig() *AgentConfig {
	if x != nil {
		return x.AgentConfig
	}
	return nil
}

type DataPlaneStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageMetadata *common.MessageRequest `protobuf:"bytes,1,opt,name=message_metadata,json=messageMetadata,proto3" json:"message_metadata,omitempty"`
	Instances       []*Instance            `protobuf:"bytes,2,rep,name=instances,proto3" json:"instances,omitempty"`
}

func (x *DataPlaneStatus) Reset() {
	*x = DataPlaneStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataPlaneStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPlaneStatus) ProtoMessage() {}

func (x *DataPlaneStatus) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPlaneStatus.ProtoReflect.Descriptor instead.
func (*DataPlaneStatus) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{6}
}

func (x *DataPlaneStatus) GetMessageMetadata() *common.MessageRequest {
	if x != nil {
		return x.MessageMetadata
	}
	return nil
}

func (x *DataPlaneStatus) GetInstances() []*Instance {
	if x != nil {
		return x.Instances
	}
	return nil
}

// only send changed values
type Instance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceMeta   *InstanceMeta   `protobuf:"bytes,1,opt,name=instance_meta,json=instanceMeta,proto3" json:"instance_meta,omitempty"`
	InstanceConfig *InstanceConfig `protobuf:"bytes,2,opt,name=instance_config,json=instanceConfig,proto3" json:"instance_config,omitempty"`
}

func (x *Instance) Reset() {
	*x = Instance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instance) ProtoMessage() {}

func (x *Instance) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instance.ProtoReflect.Descriptor instead.
func (*Instance) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{7}
}

func (x *Instance) GetInstanceMeta() *InstanceMeta {
	if x != nil {
		return x.InstanceMeta
	}
	return nil
}

func (x *Instance) GetInstanceConfig() *InstanceConfig {
	if x != nil {
		return x.InstanceConfig
	}
	return nil
}

type InstanceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repeated enum of actions?!?
	Actions []*InstanceAction `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"` // can put into a common object and reuse
	// Types that are assignable to Config:
	//
	//	*InstanceConfig_AgentConfig
	//	*InstanceConfig_NginxConfig
	//	*InstanceConfig_NginxPlusConfig
	Config isInstanceConfig_Config `protobuf_oneof:"config"`
}

func (x *InstanceConfig) Reset() {
	*x = InstanceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceConfig) ProtoMessage() {}

func (x *InstanceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceConfig.ProtoReflect.Descriptor instead.
func (*InstanceConfig) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{8}
}

func (x *InstanceConfig) GetActions() []*InstanceAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (m *InstanceConfig) GetConfig() isInstanceConfig_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *InstanceConfig) GetAgentConfig() *AgentConfig {
	if x, ok := x.GetConfig().(*InstanceConfig_AgentConfig); ok {
		return x.AgentConfig
	}
	return nil
}

func (x *InstanceConfig) GetNginxConfig() *NGINXConfig {
	if x, ok := x.GetConfig().(*InstanceConfig_NginxConfig); ok {
		return x.NginxConfig
	}
	return nil
}

func (x *InstanceConfig) GetNginxPlusConfig() *NGINXPlusConfig {
	if x, ok := x.GetConfig().(*InstanceConfig_NginxPlusConfig); ok {
		return x.NginxPlusConfig
	}
	return nil
}

type isInstanceConfig_Config interface {
	isInstanceConfig_Config()
}

type InstanceConfig_AgentConfig struct {
	AgentConfig *AgentConfig `protobuf:"bytes,2,opt,name=agent_config,json=agentConfig,proto3,oneof"`
}

type InstanceConfig_NginxConfig struct {
	NginxConfig *NGINXConfig `protobuf:"bytes,3,opt,name=nginx_config,json=nginxConfig,proto3,oneof"`
}

type InstanceConfig_NginxPlusConfig struct {
	NginxPlusConfig *NGINXPlusConfig `protobuf:"bytes,4,opt,name=nginx_plus_config,json=nginxPlusConfig,proto3,oneof"` // ... others NIC, NGF, Unit
}

func (*InstanceConfig_AgentConfig) isInstanceConfig_Config() {}

func (*InstanceConfig_NginxConfig) isInstanceConfig_Config() {}

func (*InstanceConfig_NginxPlusConfig) isInstanceConfig_Config() {}

type InstanceAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action InstanceAction_InstanceActions `protobuf:"varint,1,opt,name=action,proto3,enum=f5.nginx.agent.api.grpc.mpi.v1.InstanceAction_InstanceActions" json:"action,omitempty"`
}

func (x *InstanceAction) Reset() {
	*x = InstanceAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceAction) ProtoMessage() {}

func (x *InstanceAction) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceAction.ProtoReflect.Descriptor instead.
func (*InstanceAction) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{9}
}

func (x *InstanceAction) GetAction() InstanceAction_InstanceActions {
	if x != nil {
		return x.Action
	}
	return InstanceAction_UNKNOWN
}

type InstanceHealth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Health status
	InstanceHealthStatus InstanceHealth_InstancHealthStatus `protobuf:"varint,2,opt,name=instance_health_status,json=instanceHealthStatus,proto3,enum=f5.nginx.agent.api.grpc.mpi.v1.InstanceHealth_InstancHealthStatus" json:"instance_health_status,omitempty"`
	// Provides a human readable context around why a health status is a particular state
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *InstanceHealth) Reset() {
	*x = InstanceHealth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceHealth) ProtoMessage() {}

func (x *InstanceHealth) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceHealth.ProtoReflect.Descriptor instead.
func (*InstanceHealth) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{10}
}

func (x *InstanceHealth) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *InstanceHealth) GetInstanceHealthStatus() InstanceHealth_InstancHealthStatus {
	if x != nil {
		return x.InstanceHealthStatus
	}
	return InstanceHealth_UNKNOWN
}

func (x *InstanceHealth) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type InstanceMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceType InstanceMeta_InstanceType `protobuf:"varint,1,opt,name=instance_type,json=instanceType,proto3,enum=f5.nginx.agent.api.grpc.mpi.v1.InstanceMeta_InstanceType" json:"instance_type,omitempty"`
	Uuid         string                    `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Version      string                    `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *InstanceMeta) Reset() {
	*x = InstanceMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceMeta) ProtoMessage() {}

func (x *InstanceMeta) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceMeta.ProtoReflect.Descriptor instead.
func (*InstanceMeta) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{11}
}

func (x *InstanceMeta) GetInstanceType() InstanceMeta_InstanceType {
	if x != nil {
		return x.InstanceType
	}
	return InstanceMeta_UNKNOWN
}

func (x *InstanceMeta) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *InstanceMeta) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type DataPlaneHealth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageMetadata *common.MessageRequest `protobuf:"bytes,1,opt,name=message_metadata,json=messageMetadata,proto3" json:"message_metadata,omitempty"`
	InstanceHealth  []*InstanceHealth      `protobuf:"bytes,2,rep,name=instance_health,json=instanceHealth,proto3" json:"instance_health,omitempty"`
}

func (x *DataPlaneHealth) Reset() {
	*x = DataPlaneHealth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataPlaneHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPlaneHealth) ProtoMessage() {}

func (x *DataPlaneHealth) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPlaneHealth.ProtoReflect.Descriptor instead.
func (*DataPlaneHealth) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{12}
}

func (x *DataPlaneHealth) GetMessageMetadata() *common.MessageRequest {
	if x != nil {
		return x.MessageMetadata
	}
	return nil
}

func (x *DataPlaneHealth) GetInstanceHealth() []*InstanceHealth {
	if x != nil {
		return x.InstanceHealth
	}
	return nil
}

type DataPlaneMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageMetadata *common.MessageRequest  `protobuf:"bytes,1,opt,name=message_metadata,json=messageMetadata,proto3" json:"message_metadata,omitempty"`
	CommandResponse *common.CommandResponse `protobuf:"bytes,2,opt,name=command_response,json=commandResponse,proto3" json:"command_response,omitempty"` // triggers a RPC, acks message has been acted on
}

func (x *DataPlaneMessage) Reset() {
	*x = DataPlaneMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataPlaneMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPlaneMessage) ProtoMessage() {}

func (x *DataPlaneMessage) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPlaneMessage.ProtoReflect.Descriptor instead.
func (*DataPlaneMessage) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{13}
}

func (x *DataPlaneMessage) GetMessageMetadata() *common.MessageRequest {
	if x != nil {
		return x.MessageMetadata
	}
	return nil
}

func (x *DataPlaneMessage) GetCommandResponse() *common.CommandResponse {
	if x != nil {
		return x.CommandResponse
	}
	return nil
}

type ManagementPlaneMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageMetadata *common.MessageRequest             `protobuf:"bytes,1,opt,name=message_metadata,json=messageMetadata,proto3" json:"message_metadata,omitempty"`
	Type            ManagementPlaneMessage_RequestType `protobuf:"varint,2,opt,name=type,proto3,enum=f5.nginx.agent.api.grpc.mpi.v1.ManagementPlaneMessage_RequestType" json:"type,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*ManagementPlaneMessage_StatusRequest
	//	*ManagementPlaneMessage_ConfigRequest
	//	*ManagementPlaneMessage_ActionRequest
	Payload isManagementPlaneMessage_Payload `protobuf_oneof:"payload"`
}

func (x *ManagementPlaneMessage) Reset() {
	*x = ManagementPlaneMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagementPlaneMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagementPlaneMessage) ProtoMessage() {}

func (x *ManagementPlaneMessage) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagementPlaneMessage.ProtoReflect.Descriptor instead.
func (*ManagementPlaneMessage) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{14}
}

func (x *ManagementPlaneMessage) GetMessageMetadata() *common.MessageRequest {
	if x != nil {
		return x.MessageMetadata
	}
	return nil
}

func (x *ManagementPlaneMessage) GetType() ManagementPlaneMessage_RequestType {
	if x != nil {
		return x.Type
	}
	return ManagementPlaneMessage_UNKNOWN
}

func (m *ManagementPlaneMessage) GetPayload() isManagementPlaneMessage_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *ManagementPlaneMessage) GetStatusRequest() *StatusRequest {
	if x, ok := x.GetPayload().(*ManagementPlaneMessage_StatusRequest); ok {
		return x.StatusRequest
	}
	return nil
}

func (x *ManagementPlaneMessage) GetConfigRequest() *ConfigRequest {
	if x, ok := x.GetPayload().(*ManagementPlaneMessage_ConfigRequest); ok {
		return x.ConfigRequest
	}
	return nil
}

func (x *ManagementPlaneMessage) GetActionRequest() *ActionRequest {
	if x, ok := x.GetPayload().(*ManagementPlaneMessage_ActionRequest); ok {
		return x.ActionRequest
	}
	return nil
}

type isManagementPlaneMessage_Payload interface {
	isManagementPlaneMessage_Payload()
}

type ManagementPlaneMessage_StatusRequest struct {
	StatusRequest *StatusRequest `protobuf:"bytes,3,opt,name=status_request,json=statusRequest,proto3,oneof"`
}

type ManagementPlaneMessage_ConfigRequest struct {
	ConfigRequest *ConfigRequest `protobuf:"bytes,4,opt,name=config_request,json=configRequest,proto3,oneof"`
}

type ManagementPlaneMessage_ActionRequest struct {
	ActionRequest *ActionRequest `protobuf:"bytes,5,opt,name=action_request,json=actionRequest,proto3,oneof"`
}

func (*ManagementPlaneMessage_StatusRequest) isManagementPlaneMessage_Payload() {}

func (*ManagementPlaneMessage_ConfigRequest) isManagementPlaneMessage_Payload() {}

func (*ManagementPlaneMessage_ActionRequest) isManagementPlaneMessage_Payload() {}

type StatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StatusRequest) Reset() {
	*x = StatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusRequest) ProtoMessage() {}

func (x *StatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusRequest.ProtoReflect.Descriptor instead.
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{15}
}

type ConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigVersion *file.ConfigVersion `protobuf:"bytes,1,opt,name=config_version,json=configVersion,proto3" json:"config_version,omitempty"`
}

func (x *ConfigRequest) Reset() {
	*x = ConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest) ProtoMessage() {}

func (x *ConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest.ProtoReflect.Descriptor instead.
func (*ConfigRequest) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{16}
}

func (x *ConfigRequest) GetConfigVersion() *file.ConfigVersion {
	if x != nil {
		return x.ConfigVersion
	}
	return nil
}

type ActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action *InstanceAction `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*ActionRequest_DafaultAction
	Payload isActionRequest_Payload `protobuf_oneof:"payload"`
}

func (x *ActionRequest) Reset() {
	*x = ActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionRequest) ProtoMessage() {}

func (x *ActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionRequest.ProtoReflect.Descriptor instead.
func (*ActionRequest) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{17}
}

func (x *ActionRequest) GetAction() *InstanceAction {
	if x != nil {
		return x.Action
	}
	return nil
}

func (m *ActionRequest) GetPayload() isActionRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *ActionRequest) GetDafaultAction() *DefaultAction {
	if x, ok := x.GetPayload().(*ActionRequest_DafaultAction); ok {
		return x.DafaultAction
	}
	return nil
}

type isActionRequest_Payload interface {
	isActionRequest_Payload()
}

type ActionRequest_DafaultAction struct {
	// add actions as we support new capabilities
	DafaultAction *DefaultAction `protobuf:"bytes,2,opt,name=dafault_action,json=dafaultAction,proto3,oneof"`
}

func (*ActionRequest_DafaultAction) isActionRequest_Payload() {}

type DefaultAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params []*structpb.Struct `protobuf:"bytes,1,rep,name=params,proto3" json:"params,omitempty"`
}

func (x *DefaultAction) Reset() {
	*x = DefaultAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultAction) ProtoMessage() {}

func (x *DefaultAction) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultAction.ProtoReflect.Descriptor instead.
func (*DefaultAction) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{18}
}

func (x *DefaultAction) GetParams() []*structpb.Struct {
	if x != nil {
		return x.Params
	}
	return nil
}

var File_command_proto protoreflect.FileDescriptor

var file_command_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x1a,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb5, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x10, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x05,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66, 0x35,
	0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x22, 0x9a, 0x01, 0x0a,
	0x0b, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3e, 0x0a, 0x06,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x66,
	0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x38, 0x0a, 0x06, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x22, 0xca, 0x01, 0x0a, 0x0b, 0x4e, 0x47, 0x49, 0x4e, 0x58, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x75, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x73,
	0x22, 0xbf, 0x01, 0x0a, 0x0f, 0x4e, 0x47, 0x49, 0x4e, 0x58, 0x50, 0x6c, 0x75, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61,
	0x70, 0x69, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x6f, 0x67,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c,
	0x6f, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x67,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f,
	0x67, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x66, 0x35,
	0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a,
	0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xbb, 0x01,
	0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x60, 0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x66, 0x35,
	0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e,
	0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x08,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0c, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x57, 0x0a, 0x0f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0xe7, 0x02, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x48, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67,
	0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x50, 0x0a, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69,
	0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x50, 0x0a, 0x0c, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x35, 0x2e, 0x6e,
	0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x47, 0x49, 0x4e, 0x58,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5d, 0x0a, 0x11, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x5f, 0x70,
	0x6c, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x47, 0x49, 0x4e, 0x58, 0x50, 0x6c, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x0f, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x50, 0x6c, 0x75, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x88,
	0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x56, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3e, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1e, 0x0a, 0x0f, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x22, 0x8e, 0x02, 0x0a, 0x0e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x78, 0x0a, 0x16, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x42, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4c, 0x0a, 0x13,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x55, 0x4e, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x44, 0x45, 0x47, 0x52, 0x41, 0x44, 0x45, 0x44, 0x10, 0x03, 0x22, 0xed, 0x01, 0x0a, 0x0c, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x5e, 0x0a, 0x0d, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x39, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4f, 0x0a, 0x0c, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x47, 0x49, 0x4e, 0x58, 0x5f, 0x4f, 0x53, 0x53, 0x10, 0x02,
	0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x47, 0x49, 0x4e, 0x58, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x10, 0x03,
	0x12, 0x08, 0x0a, 0x04, 0x55, 0x4e, 0x49, 0x54, 0x10, 0x04, 0x22, 0xcc, 0x01, 0x0a, 0x0f, 0x44,
	0x61, 0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x60,
	0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67,
	0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x57, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x66, 0x35, 0x2e, 0x6e,
	0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x22, 0xd7, 0x01, 0x0a, 0x10, 0x44, 0x61,
	0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x60,
	0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67,
	0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x61, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x66, 0x35, 0x2e,
	0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xcd, 0x04, 0x0a, 0x16, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x60,
	0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67,
	0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x56, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42,
	0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x56, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x56, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67,
	0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x66, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x45, 0x41, 0x4c,
	0x54, 0x48, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x55,
	0x50, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x22, 0x0f, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x6a, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0xba, 0x01, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x46, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x0e, 0x64, 0x61,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x61, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x40, 0x0a,
	0x0d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x32,
	0xab, 0x03, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x72, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x31, 0x2e,
	0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x32, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2f, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x06, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x2f, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x7b, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x30, 0x2e,
	0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a,
	0x36, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x3b, 0x5a,
	0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x67, 0x69, 0x6e,
	0x78, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67,
	0x72, 0x70, 0x63, 0x2f, 0x6d, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_command_proto_rawDescOnce sync.Once
	file_command_proto_rawDescData = file_command_proto_rawDesc
)

func file_command_proto_rawDescGZIP() []byte {
	file_command_proto_rawDescOnce.Do(func() {
		file_command_proto_rawDescData = protoimpl.X.CompressGZIP(file_command_proto_rawDescData)
	})
	return file_command_proto_rawDescData
}

var file_command_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_command_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_command_proto_goTypes = []interface{}{
	(InstanceAction_InstanceActions)(0),     // 0: f5.nginx.agent.api.grpc.mpi.v1.InstanceAction.InstanceActions
	(InstanceHealth_InstancHealthStatus)(0), // 1: f5.nginx.agent.api.grpc.mpi.v1.InstanceHealth.InstancHealthStatus
	(InstanceMeta_InstanceType)(0),          // 2: f5.nginx.agent.api.grpc.mpi.v1.InstanceMeta.InstanceType
	(ManagementPlaneMessage_RequestType)(0), // 3: f5.nginx.agent.api.grpc.mpi.v1.ManagementPlaneMessage.RequestType
	(*ConnectionRequest)(nil),               // 4: f5.nginx.agent.api.grpc.mpi.v1.ConnectionRequest
	(*AgentConfig)(nil),                     // 5: f5.nginx.agent.api.grpc.mpi.v1.AgentConfig
	(*Server)(nil),                          // 6: f5.nginx.agent.api.grpc.mpi.v1.Server
	(*NGINXConfig)(nil),                     // 7: f5.nginx.agent.api.grpc.mpi.v1.NGINXConfig
	(*NGINXPlusConfig)(nil),                 // 8: f5.nginx.agent.api.grpc.mpi.v1.NGINXPlusConfig
	(*ConnectionResponse)(nil),              // 9: f5.nginx.agent.api.grpc.mpi.v1.ConnectionResponse
	(*DataPlaneStatus)(nil),                 // 10: f5.nginx.agent.api.grpc.mpi.v1.DataPlaneStatus
	(*Instance)(nil),                        // 11: f5.nginx.agent.api.grpc.mpi.v1.Instance
	(*InstanceConfig)(nil),                  // 12: f5.nginx.agent.api.grpc.mpi.v1.InstanceConfig
	(*InstanceAction)(nil),                  // 13: f5.nginx.agent.api.grpc.mpi.v1.InstanceAction
	(*InstanceHealth)(nil),                  // 14: f5.nginx.agent.api.grpc.mpi.v1.InstanceHealth
	(*InstanceMeta)(nil),                    // 15: f5.nginx.agent.api.grpc.mpi.v1.InstanceMeta
	(*DataPlaneHealth)(nil),                 // 16: f5.nginx.agent.api.grpc.mpi.v1.DataPlaneHealth
	(*DataPlaneMessage)(nil),                // 17: f5.nginx.agent.api.grpc.mpi.v1.DataPlaneMessage
	(*ManagementPlaneMessage)(nil),          // 18: f5.nginx.agent.api.grpc.mpi.v1.ManagementPlaneMessage
	(*StatusRequest)(nil),                   // 19: f5.nginx.agent.api.grpc.mpi.v1.StatusRequest
	(*ConfigRequest)(nil),                   // 20: f5.nginx.agent.api.grpc.mpi.v1.ConfigRequest
	(*ActionRequest)(nil),                   // 21: f5.nginx.agent.api.grpc.mpi.v1.ActionRequest
	(*DefaultAction)(nil),                   // 22: f5.nginx.agent.api.grpc.mpi.v1.DefaultAction
	(*common.MessageRequest)(nil),           // 23: f5.nginx.agent.api.grpc.mpi.v1.common.MessageRequest
	(*structpb.Struct)(nil),                 // 24: google.protobuf.Struct
	(*common.CommandResponse)(nil),          // 25: f5.nginx.agent.api.grpc.mpi.v1.common.CommandResponse
	(*file.ConfigVersion)(nil),              // 26: f5.nginx.agent.api.grpc.mpi.v1.file.ConfigVersion
	(*emptypb.Empty)(nil),                   // 27: google.protobuf.Empty
}
var file_command_proto_depIdxs = []int32{
	23, // 0: f5.nginx.agent.api.grpc.mpi.v1.ConnectionRequest.message_metadata:type_name -> f5.nginx.agent.api.grpc.mpi.v1.common.MessageRequest
	11, // 1: f5.nginx.agent.api.grpc.mpi.v1.ConnectionRequest.agent:type_name -> f5.nginx.agent.api.grpc.mpi.v1.Instance
	6,  // 2: f5.nginx.agent.api.grpc.mpi.v1.AgentConfig.server:type_name -> f5.nginx.agent.api.grpc.mpi.v1.Server
	24, // 3: f5.nginx.agent.api.grpc.mpi.v1.AgentConfig.labels:type_name -> google.protobuf.Struct
	25, // 4: f5.nginx.agent.api.grpc.mpi.v1.ConnectionResponse.response:type_name -> f5.nginx.agent.api.grpc.mpi.v1.common.CommandResponse
	5,  // 5: f5.nginx.agent.api.grpc.mpi.v1.ConnectionResponse.agent_config:type_name -> f5.nginx.agent.api.grpc.mpi.v1.AgentConfig
	23, // 6: f5.nginx.agent.api.grpc.mpi.v1.DataPlaneStatus.message_metadata:type_name -> f5.nginx.agent.api.grpc.mpi.v1.common.MessageRequest
	11, // 7: f5.nginx.agent.api.grpc.mpi.v1.DataPlaneStatus.instances:type_name -> f5.nginx.agent.api.grpc.mpi.v1.Instance
	15, // 8: f5.nginx.agent.api.grpc.mpi.v1.Instance.instance_meta:type_name -> f5.nginx.agent.api.grpc.mpi.v1.InstanceMeta
	12, // 9: f5.nginx.agent.api.grpc.mpi.v1.Instance.instance_config:type_name -> f5.nginx.agent.api.grpc.mpi.v1.InstanceConfig
	13, // 10: f5.nginx.agent.api.grpc.mpi.v1.InstanceConfig.actions:type_name -> f5.nginx.agent.api.grpc.mpi.v1.InstanceAction
	5,  // 11: f5.nginx.agent.api.grpc.mpi.v1.InstanceConfig.agent_config:type_name -> f5.nginx.agent.api.grpc.mpi.v1.AgentConfig
	7,  // 12: f5.nginx.agent.api.grpc.mpi.v1.InstanceConfig.nginx_config:type_name -> f5.nginx.agent.api.grpc.mpi.v1.NGINXConfig
	8,  // 13: f5.nginx.agent.api.grpc.mpi.v1.InstanceConfig.nginx_plus_config:type_name -> f5.nginx.agent.api.grpc.mpi.v1.NGINXPlusConfig
	0,  // 14: f5.nginx.agent.api.grpc.mpi.v1.InstanceAction.action:type_name -> f5.nginx.agent.api.grpc.mpi.v1.InstanceAction.InstanceActions
	1,  // 15: f5.nginx.agent.api.grpc.mpi.v1.InstanceHealth.instance_health_status:type_name -> f5.nginx.agent.api.grpc.mpi.v1.InstanceHealth.InstancHealthStatus
	2,  // 16: f5.nginx.agent.api.grpc.mpi.v1.InstanceMeta.instance_type:type_name -> f5.nginx.agent.api.grpc.mpi.v1.InstanceMeta.InstanceType
	23, // 17: f5.nginx.agent.api.grpc.mpi.v1.DataPlaneHealth.message_metadata:type_name -> f5.nginx.agent.api.grpc.mpi.v1.common.MessageRequest
	14, // 18: f5.nginx.agent.api.grpc.mpi.v1.DataPlaneHealth.instance_health:type_name -> f5.nginx.agent.api.grpc.mpi.v1.InstanceHealth
	23, // 19: f5.nginx.agent.api.grpc.mpi.v1.DataPlaneMessage.message_metadata:type_name -> f5.nginx.agent.api.grpc.mpi.v1.common.MessageRequest
	25, // 20: f5.nginx.agent.api.grpc.mpi.v1.DataPlaneMessage.command_response:type_name -> f5.nginx.agent.api.grpc.mpi.v1.common.CommandResponse
	23, // 21: f5.nginx.agent.api.grpc.mpi.v1.ManagementPlaneMessage.message_metadata:type_name -> f5.nginx.agent.api.grpc.mpi.v1.common.MessageRequest
	3,  // 22: f5.nginx.agent.api.grpc.mpi.v1.ManagementPlaneMessage.type:type_name -> f5.nginx.agent.api.grpc.mpi.v1.ManagementPlaneMessage.RequestType
	19, // 23: f5.nginx.agent.api.grpc.mpi.v1.ManagementPlaneMessage.status_request:type_name -> f5.nginx.agent.api.grpc.mpi.v1.StatusRequest
	20, // 24: f5.nginx.agent.api.grpc.mpi.v1.ManagementPlaneMessage.config_request:type_name -> f5.nginx.agent.api.grpc.mpi.v1.ConfigRequest
	21, // 25: f5.nginx.agent.api.grpc.mpi.v1.ManagementPlaneMessage.action_request:type_name -> f5.nginx.agent.api.grpc.mpi.v1.ActionRequest
	26, // 26: f5.nginx.agent.api.grpc.mpi.v1.ConfigRequest.config_version:type_name -> f5.nginx.agent.api.grpc.mpi.v1.file.ConfigVersion
	13, // 27: f5.nginx.agent.api.grpc.mpi.v1.ActionRequest.action:type_name -> f5.nginx.agent.api.grpc.mpi.v1.InstanceAction
	22, // 28: f5.nginx.agent.api.grpc.mpi.v1.ActionRequest.dafault_action:type_name -> f5.nginx.agent.api.grpc.mpi.v1.DefaultAction
	24, // 29: f5.nginx.agent.api.grpc.mpi.v1.DefaultAction.params:type_name -> google.protobuf.Struct
	4,  // 30: f5.nginx.agent.api.grpc.mpi.v1.CommandService.Connect:input_type -> f5.nginx.agent.api.grpc.mpi.v1.ConnectionRequest
	10, // 31: f5.nginx.agent.api.grpc.mpi.v1.CommandService.Status:input_type -> f5.nginx.agent.api.grpc.mpi.v1.DataPlaneStatus
	16, // 32: f5.nginx.agent.api.grpc.mpi.v1.CommandService.Health:input_type -> f5.nginx.agent.api.grpc.mpi.v1.DataPlaneHealth
	17, // 33: f5.nginx.agent.api.grpc.mpi.v1.CommandService.Subscribe:input_type -> f5.nginx.agent.api.grpc.mpi.v1.DataPlaneMessage
	9,  // 34: f5.nginx.agent.api.grpc.mpi.v1.CommandService.Connect:output_type -> f5.nginx.agent.api.grpc.mpi.v1.ConnectionResponse
	27, // 35: f5.nginx.agent.api.grpc.mpi.v1.CommandService.Status:output_type -> google.protobuf.Empty
	27, // 36: f5.nginx.agent.api.grpc.mpi.v1.CommandService.Health:output_type -> google.protobuf.Empty
	18, // 37: f5.nginx.agent.api.grpc.mpi.v1.CommandService.Subscribe:output_type -> f5.nginx.agent.api.grpc.mpi.v1.ManagementPlaneMessage
	34, // [34:38] is the sub-list for method output_type
	30, // [30:34] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_command_proto_init() }
func file_command_proto_init() {
	if File_command_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_command_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Server); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NGINXConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NGINXPlusConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataPlaneStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceHealth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataPlaneHealth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataPlaneMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagementPlaneMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_command_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*InstanceConfig_AgentConfig)(nil),
		(*InstanceConfig_NginxConfig)(nil),
		(*InstanceConfig_NginxPlusConfig)(nil),
	}
	file_command_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*ManagementPlaneMessage_StatusRequest)(nil),
		(*ManagementPlaneMessage_ConfigRequest)(nil),
		(*ManagementPlaneMessage_ActionRequest)(nil),
	}
	file_command_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*ActionRequest_DafaultAction)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_command_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_command_proto_goTypes,
		DependencyIndexes: file_command_proto_depIdxs,
		EnumInfos:         file_command_proto_enumTypes,
		MessageInfos:      file_command_proto_msgTypes,
	}.Build()
	File_command_proto = out.File
	file_command_proto_rawDesc = nil
	file_command_proto_goTypes = nil
	file_command_proto_depIdxs = nil
}
