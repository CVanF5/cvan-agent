// Copyright (c) F5, Inc.
//
// This source code is licensed under the Apache License, Version 2.0 license found in the
// LICENSE file in the root directory of this source tree.

// These proto definitions follow https://protobuf.dev/programming-guides/style/
// and recommendations outlined in https://static.sched.com/hosted_files/kccncna17/ad/2017%20CloudNativeCon%20-%20Mod%20gRPC%20Services.pdf

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.2
// source: mpi/v1/command.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Connection Type enumeration
type Server_ConnectionType int32

const (
	// Default connection type
	Server_CONNECTION_TYPE_UNSPECIFIED Server_ConnectionType = 0
	// HTTP connection type
	Server_CONNECTION_TYPE_HTTP Server_ConnectionType = 1
	// gRPC connection type
	Server_CONNECTION_TYPE_GRPC Server_ConnectionType = 2
	// unix socket connection type
	Server_CONNECTION_TYPE_UNIX Server_ConnectionType = 3
)

// Enum value maps for Server_ConnectionType.
var (
	Server_ConnectionType_name = map[int32]string{
		0: "CONNECTION_TYPE_UNSPECIFIED",
		1: "CONNECTION_TYPE_HTTP",
		2: "CONNECTION_TYPE_GRPC",
		3: "CONNECTION_TYPE_UNIX",
	}
	Server_ConnectionType_value = map[string]int32{
		"CONNECTION_TYPE_UNSPECIFIED": 0,
		"CONNECTION_TYPE_HTTP":        1,
		"CONNECTION_TYPE_GRPC":        2,
		"CONNECTION_TYPE_UNIX":        3,
	}
)

func (x Server_ConnectionType) Enum() *Server_ConnectionType {
	p := new(Server_ConnectionType)
	*p = x
	return p
}

func (x Server_ConnectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Server_ConnectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_mpi_v1_command_proto_enumTypes[0].Descriptor()
}

func (Server_ConnectionType) Type() protoreflect.EnumType {
	return &file_mpi_v1_command_proto_enumTypes[0]
}

func (x Server_ConnectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Server_ConnectionType.Descriptor instead.
func (Server_ConnectionType) EnumDescriptor() ([]byte, []int) {
	return file_mpi_v1_command_proto_rawDescGZIP(), []int{7, 0}
}

type InstanceAction_InstanceActionType int32

const (
	// Default action
	InstanceAction_INSTANCE_ACTION_TYPE_UNSPECIFIED InstanceAction_InstanceActionType = 0
)

// Enum value maps for InstanceAction_InstanceActionType.
var (
	InstanceAction_InstanceActionType_name = map[int32]string{
		0: "INSTANCE_ACTION_TYPE_UNSPECIFIED",
	}
	InstanceAction_InstanceActionType_value = map[string]int32{
		"INSTANCE_ACTION_TYPE_UNSPECIFIED": 0,
	}
)

func (x InstanceAction_InstanceActionType) Enum() *InstanceAction_InstanceActionType {
	p := new(InstanceAction_InstanceActionType)
	*p = x
	return p
}

func (x InstanceAction_InstanceActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstanceAction_InstanceActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_mpi_v1_command_proto_enumTypes[1].Descriptor()
}

func (InstanceAction_InstanceActionType) Type() protoreflect.EnumType {
	return &file_mpi_v1_command_proto_enumTypes[1]
}

func (x InstanceAction_InstanceActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstanceAction_InstanceActionType.Descriptor instead.
func (InstanceAction_InstanceActionType) EnumDescriptor() ([]byte, []int) {
	return file_mpi_v1_command_proto_rawDescGZIP(), []int{18, 0}
}

// Health status enum
type InstanceHealth_InstanceHealthStatus int32

const (
	// Unspecified status
	InstanceHealth_INSTANCE_HEALTH_STATUS_UNSPECIFIED InstanceHealth_InstanceHealthStatus = 0
	// Healthy status
	InstanceHealth_INSTANCE_HEALTH_STATUS_HEALTHY InstanceHealth_InstanceHealthStatus = 1
	// Unhealthy status
	InstanceHealth_INSTANCE_HEALTH_STATUS_UNHEALTHY InstanceHealth_InstanceHealthStatus = 2
	// Degraded status
	InstanceHealth_INSTANCE_HEALTH_STATUS_DEGRADED InstanceHealth_InstanceHealthStatus = 3
)

// Enum value maps for InstanceHealth_InstanceHealthStatus.
var (
	InstanceHealth_InstanceHealthStatus_name = map[int32]string{
		0: "INSTANCE_HEALTH_STATUS_UNSPECIFIED",
		1: "INSTANCE_HEALTH_STATUS_HEALTHY",
		2: "INSTANCE_HEALTH_STATUS_UNHEALTHY",
		3: "INSTANCE_HEALTH_STATUS_DEGRADED",
	}
	InstanceHealth_InstanceHealthStatus_value = map[string]int32{
		"INSTANCE_HEALTH_STATUS_UNSPECIFIED": 0,
		"INSTANCE_HEALTH_STATUS_HEALTHY":     1,
		"INSTANCE_HEALTH_STATUS_UNHEALTHY":   2,
		"INSTANCE_HEALTH_STATUS_DEGRADED":    3,
	}
)

func (x InstanceHealth_InstanceHealthStatus) Enum() *InstanceHealth_InstanceHealthStatus {
	p := new(InstanceHealth_InstanceHealthStatus)
	*p = x
	return p
}

func (x InstanceHealth_InstanceHealthStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstanceHealth_InstanceHealthStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_mpi_v1_command_proto_enumTypes[2].Descriptor()
}

func (InstanceHealth_InstanceHealthStatus) Type() protoreflect.EnumType {
	return &file_mpi_v1_command_proto_enumTypes[2]
}

func (x InstanceHealth_InstanceHealthStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstanceHealth_InstanceHealthStatus.Descriptor instead.
func (InstanceHealth_InstanceHealthStatus) EnumDescriptor() ([]byte, []int) {
	return file_mpi_v1_command_proto_rawDescGZIP(), []int{19, 0}
}

// the types of instances possible
type InstanceMeta_InstanceType int32

const (
	// Unspecified instance type
	InstanceMeta_INSTANCE_TYPE_UNSPECIFIED InstanceMeta_InstanceType = 0
	// NGINX Agent
	InstanceMeta_INSTANCE_TYPE_AGENT InstanceMeta_InstanceType = 1
	// NGINX
	InstanceMeta_INSTANCE_TYPE_NGINX InstanceMeta_InstanceType = 2
	// NGINX Plus
	InstanceMeta_INSTANCE_TYPE_NGINX_PLUS InstanceMeta_InstanceType = 3
	// NGINX Unit
	InstanceMeta_INSTANCE_TYPE_UNIT InstanceMeta_InstanceType = 4
)

// Enum value maps for InstanceMeta_InstanceType.
var (
	InstanceMeta_InstanceType_name = map[int32]string{
		0: "INSTANCE_TYPE_UNSPECIFIED",
		1: "INSTANCE_TYPE_AGENT",
		2: "INSTANCE_TYPE_NGINX",
		3: "INSTANCE_TYPE_NGINX_PLUS",
		4: "INSTANCE_TYPE_UNIT",
	}
	InstanceMeta_InstanceType_value = map[string]int32{
		"INSTANCE_TYPE_UNSPECIFIED": 0,
		"INSTANCE_TYPE_AGENT":       1,
		"INSTANCE_TYPE_NGINX":       2,
		"INSTANCE_TYPE_NGINX_PLUS":  3,
		"INSTANCE_TYPE_UNIT":        4,
	}
)

func (x InstanceMeta_InstanceType) Enum() *InstanceMeta_InstanceType {
	p := new(InstanceMeta_InstanceType)
	*p = x
	return p
}

func (x InstanceMeta_InstanceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstanceMeta_InstanceType) Descriptor() protoreflect.EnumDescriptor {
	return file_mpi_v1_command_proto_enumTypes[3].Descriptor()
}

func (InstanceMeta_InstanceType) Type() protoreflect.EnumType {
	return &file_mpi_v1_command_proto_enumTypes[3]
}

func (x InstanceMeta_InstanceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstanceMeta_InstanceType.Descriptor instead.
func (InstanceMeta_InstanceType) EnumDescriptor() ([]byte, []int) {
	return file_mpi_v1_command_proto_rawDescGZIP(), []int{20, 0}
}

// The connection request is an intial handshake to establish a connection, sending NGINX Agent instance information
type CreateConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Meta-information associated with a message
	MessageMeta *MessageMeta `protobuf:"bytes,1,opt,name=message_meta,json=messageMeta,proto3" json:"message_meta,omitempty"`
	// instance information associated with the NGINX Agent
	Agent *Instance `protobuf:"bytes,2,opt,name=agent,proto3" json:"agent,omitempty"`
}

func (x *CreateConnectionRequest) Reset() {
	*x = CreateConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpi_v1_command_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConnectionRequest) ProtoMessage() {}

func (x *CreateConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpi_v1_command_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConnectionRequest.ProtoReflect.Descriptor instead.
func (*CreateConnectionRequest) Descriptor() ([]byte, []int) {
	return file_mpi_v1_command_proto_rawDescGZIP(), []int{0}
}

func (x *CreateConnectionRequest) GetMessageMeta() *MessageMeta {
	if x != nil {
		return x.MessageMeta
	}
	return nil
}

func (x *CreateConnectionRequest) GetAgent() *Instance {
	if x != nil {
		return x.Agent
	}
	return nil
}

// This contains a series of NGINX Agent configurations
type AgentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Command server settings
	Command *Command `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	// Metrics server settings
	Metrics *Metrics `protobuf:"bytes,2,opt,name=metrics,proto3" json:"metrics,omitempty"`
	// A series of key/value pairs to add more data to the NGINX Agent instance
	Labels []*structpb.Struct `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty"`
	// A list of features that the NGINX Agent has
	Features []string `protobuf:"bytes,4,rep,name=features,proto3" json:"features,omitempty"`
	// Message buffer size, maximum not acknowledged messages from the subscribe perspective
	MessageBufferSize string `protobuf:"bytes,5,opt,name=message_buffer_size,json=messageBufferSize,proto3" json:"message_buffer_size,omitempty"`
}

func (x *AgentConfig) Reset() {
	*x = AgentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpi_v1_command_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentConfig) ProtoMessage() {}

func (x *AgentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mpi_v1_command_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentConfig.ProtoReflect.Descriptor instead.
func (*AgentConfig) Descriptor() ([]byte, []int) {
	return file_mpi_v1_command_proto_rawDescGZIP(), []int{1}
}

func (x *AgentConfig) GetCommand() *Command {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *AgentConfig) GetMetrics() *Metrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *AgentConfig) GetLabels() []*structpb.Struct {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *AgentConfig) GetFeatures() []string {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *AgentConfig) GetMessageBufferSize() string {
	if x != nil {
		return x.MessageBufferSize
	}
	return ""
}

// The command settings, associated with messaging from an external source
type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The connection and security settingss for the command server
	ConnectionSettings *ConnectionSettings `protobuf:"bytes,1,opt,name=connection_settings,json=connectionSettings,proto3" json:"connection_settings,omitempty"`
}

func (x *Command) Reset() {
	*x = Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpi_v1_command_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_mpi_v1_command_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_mpi_v1_command_proto_rawDescGZIP(), []int{2}
}

func (x *Command) GetConnectionSettings() *ConnectionSettings {
	if x != nil {
		return x.ConnectionSettings
	}
	return nil
}

// The metrics settings associated with orgins (sources) of the metrics and destinations (exporter)
type Metrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The connection and security settingss for the sources
	Sources []*Source `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
	// The connection and security settingss for the exporters server
	Exporters []*Exporter `protobuf:"bytes,2,rep,name=exporters,proto3" json:"exporters,omitempty"`
	// the local buffer size that we will cache if connectivity issues exist
	BulkSize string `protobuf:"bytes,3,opt,name=bulk_size,json=bulkSize,proto3" json:"bulk_size,omitempty"`
}

func (x *Metrics) Reset() {
	*x = Metrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpi_v1_command_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metrics) ProtoMessage() {}

func (x *Metrics) ProtoReflect() protoreflect.Message {
	mi := &file_mpi_v1_command_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metrics.ProtoReflect.Descriptor instead.
func (*Metrics) Descriptor() ([]byte, []int) {
	return file_mpi_v1_command_proto_rawDescGZIP(), []int{3}
}

func (x *Metrics) GetSources() []*Source {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *Metrics) GetExporters() []*Exporter {
	if x != nil {
		return x.Exporters
	}
	return nil
}

func (x *Metrics) GetBulkSize() string {
	if x != nil {
		return x.BulkSize
	}
	return ""
}

// A source configuration
type Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// how often to collect data from a particular source. In google.protobuf.Timestamp format
	CollectionInterval *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=collection_interval,json=collectionInterval,proto3" json:"collection_interval,omitempty"`
	// connection information to connect to a particular source
	ConnectionSettings *ConnectionSettings `protobuf:"bytes,2,opt,name=connection_settings,json=connectionSettings,proto3" json:"connection_settings,omitempty"`
}

func (x *Source) Reset() {
	*x = Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpi_v1_command_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_mpi_v1_command_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_mpi_v1_command_proto_rawDescGZIP(), []int{4}
}

func (x *Source) GetCollectionInterval() *timestamppb.Timestamp {
	if x != nil {
		return x.CollectionInterval
	}
	return nil
}

func (x *Source) GetConnectionSettings() *ConnectionSettings {
	if x != nil {
		return x.ConnectionSettings
	}
	return nil
}

// A destination configuration
type Exporter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// how often to report in google.protobuf.Timestamp format
	ReportInterval *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=report_interval,json=reportInterval,proto3" json:"report_interval,omitempty"`
	// connection information to send data to a particular destination
	ConnectionSettings *ConnectionSettings `protobuf:"bytes,2,opt,name=connection_settings,json=connectionSettings,proto3" json:"connection_settings,omitempty"`
}

func (x *Exporter) Reset() {
	*x = Exporter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpi_v1_command_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Exporter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exporter) ProtoMessage() {}

func (x *Exporter) ProtoReflect() protoreflect.Message {
	mi := &file_mpi_v1_command_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Exporter.ProtoReflect.Descriptor instead.
func (*Exporter) Descriptor() ([]byte, []int) {
	return file_mpi_v1_command_proto_rawDescGZIP(), []int{5}
}

func (x *Exporter) GetReportInterval() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportInterval
	}
	return nil
}

func (x *Exporter) GetConnectionSettings() *ConnectionSettings {
	if x != nil {
		return x.ConnectionSettings
	}
	return nil
}

// A set of connection information and it's associated auth, tls and backoff configurations
type ConnectionSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Server settings that include connection information
	Server *Server `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	// Authentication settings
	Auth *Auth `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
	// Optional TLS settings
	Tls *TLSSetting `protobuf:"bytes,3,opt,name=tls,proto3" json:"tls,omitempty"`
	// keepalive settings for this connection
	KeepAlive *KeepAlive `protobuf:"bytes,4,opt,name=keep_alive,json=keepAlive,proto3" json:"keep_alive,omitempty"`
}

func (x *ConnectionSettings) Reset() {
	*x = ConnectionSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpi_v1_command_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionSettings) ProtoMessage() {}

func (x *ConnectionSettings) ProtoReflect() protoreflect.Message {
	mi := &file_mpi_v1_command_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionSettings.ProtoReflect.Descriptor instead.
func (*ConnectionSettings) Descriptor() ([]byte, []int) {
	return file_mpi_v1_command_proto_rawDescGZIP(), []int{6}
}

func (x *ConnectionSettings) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *ConnectionSettings) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *ConnectionSettings) GetTls() *TLSSetting {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *ConnectionSettings) GetKeepAlive() *KeepAlive {
	if x != nil {
		return x.KeepAlive
	}
	return nil
}

// Server settings like hostname
type Server struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the host information
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// the port information
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// Specific connection type
	ConnectionType Server_ConnectionType `protobuf:"varint,3,opt,name=connection_type,json=connectionType,proto3,enum=mpi.v1.Server_ConnectionType" json:"connection_type,omitempty"`
}

func (x *Server) Reset() {
	*x = Server{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpi_v1_command_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server) ProtoMessage() {}

func (x *Server) ProtoReflect() protoreflect.Message {
	mi := &file_mpi_v1_command_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server.ProtoReflect.Descriptor instead.
func (*Server) Descriptor() ([]byte, []int) {
	return file_mpi_v1_command_proto_rawDescGZIP(), []int{7}
}

func (x *Server) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Server) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Server) GetConnectionType() Server_ConnectionType {
	if x != nil {
		return x.ConnectionType
	}
	return Server_CONNECTION_TYPE_UNSPECIFIED
}

// Authentication settings
type Auth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A token
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *Auth) Reset() {
	*x = Auth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpi_v1_command_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Auth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Auth) ProtoMessage() {}

func (x *Auth) ProtoReflect() protoreflect.Message {
	mi := &file_mpi_v1_command_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Auth.ProtoReflect.Descriptor instead.
func (*Auth) Descriptor() ([]byte, []int) {
	return file_mpi_v1_command_proto_rawDescGZIP(), []int{8}
}

func (x *Auth) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type TLSSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// enable tls
	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// tls cert
	Cert string `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
	// tls key
	Key string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// certificate authoirty cert
	Ca string `protobuf:"bytes,4,opt,name=ca,proto3" json:"ca,omitempty"`
	// enable verification of a server's certificate chain and host name
	SkipVerify bool `protobuf:"varint,5,opt,name=skip_verify,json=skipVerify,proto3" json:"skip_verify,omitempty"`
}

func (x *TLSSetting) Reset() {
	*x = TLSSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpi_v1_command_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSSetting) ProtoMessage() {}

func (x *TLSSetting) ProtoReflect() protoreflect.Message {
	mi := &file_mpi_v1_command_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSSetting.ProtoReflect.Descriptor instead.
func (*TLSSetting) Descriptor() ([]byte, []int) {
	return file_mpi_v1_command_proto_rawDescGZIP(), []int{9}
}

func (x *TLSSetting) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *TLSSetting) GetCert() string {
	if x != nil {
		return x.Cert
	}
	return ""
}

func (x *TLSSetting) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *TLSSetting) GetCa() string {
	if x != nil {
		return x.Ca
	}
	return ""
}

func (x *TLSSetting) GetSkipVerify() bool {
	if x != nil {
		return x.SkipVerify
	}
	return false
}

// keepalive settings based on https://pkg.go.dev/google.golang.org/grpc/keepalive#ClientParameters
type KeepAlive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// After a duration of this time if the client doesn't see any activity it
	// pings the server to see if the transport is still alive.
	// If set below 10s, a minimum value of 10s will be used instead.
	Time *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	// After having pinged for keepalive check, the client waits for a duration
	// of Timeout and if no activity is seen even after that the connection is closed.
	Timeout float64 `protobuf:"fixed64,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// If true, client sends keepalive pings even with no active RPCs. If false,
	// when there are no active RPCs, Time and Timeout will be ignored and no
	// keepalive pings will be sent.
	PermitWithoutStream bool `protobuf:"varint,3,opt,name=permit_without_stream,json=permitWithoutStream,proto3" json:"permit_without_stream,omitempty"`
}

func (x *KeepAlive) Reset() {
	*x = KeepAlive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpi_v1_command_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeepAlive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeepAlive) ProtoMessage() {}

func (x *KeepAlive) ProtoReflect() protoreflect.Message {
	mi := &file_mpi_v1_command_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeepAlive.ProtoReflect.Descriptor instead.
func (*KeepAlive) Descriptor() ([]byte, []int) {
	return file_mpi_v1_command_proto_rawDescGZIP(), []int{10}
}

func (x *KeepAlive) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *KeepAlive) GetTimeout() float64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *KeepAlive) GetPermitWithoutStream() bool {
	if x != nil {
		return x.PermitWithoutStream
	}
	return false
}

// A set of runtime NGINX configuration that gets populated
type NGINXConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// where the binary location is, if empty, this is a remote instance
	BinaryPath string `protobuf:"bytes,1,opt,name=binary_path,json=binaryPath,proto3" json:"binary_path,omitempty"`
	// the hostname associated with NGINX
	Hostname string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// the ip address associated with NGINX
	IpAddress string `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// the stub status API location
	StubStatus string `protobuf:"bytes,4,opt,name=stub_status,json=stubStatus,proto3" json:"stub_status,omitempty"`
	// a list of access_logs
	AccessLogs []string `protobuf:"bytes,5,rep,name=access_logs,json=accessLogs,proto3" json:"access_logs,omitempty"`
	// a list of error_logs
	ErrorLogs []string `protobuf:"bytes,6,rep,name=error_logs,json=errorLogs,proto3" json:"error_logs,omitempty"`
	// List of NGINX potentially lodable modules (installed but not loaded).
	LoadableModules []string `protobuf:"bytes,7,rep,name=loadable_modules,json=loadableModules,proto3" json:"loadable_modules,omitempty"`
	// List of NGINX dynamic modules.
	DynamicModules []string `protobuf:"bytes,8,rep,name=dynamic_modules,json=dynamicModules,proto3" json:"dynamic_modules,omitempty"`
}

func (x *NGINXConfig) Reset() {
	*x = NGINXConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpi_v1_command_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NGINXConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NGINXConfig) ProtoMessage() {}

func (x *NGINXConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mpi_v1_command_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NGINXConfig.ProtoReflect.Descriptor instead.
func (*NGINXConfig) Descriptor() ([]byte, []int) {
	return file_mpi_v1_command_proto_rawDescGZIP(), []int{11}
}

func (x *NGINXConfig) GetBinaryPath() string {
	if x != nil {
		return x.BinaryPath
	}
	return ""
}

func (x *NGINXConfig) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *NGINXConfig) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *NGINXConfig) GetStubStatus() string {
	if x != nil {
		return x.StubStatus
	}
	return ""
}

func (x *NGINXConfig) GetAccessLogs() []string {
	if x != nil {
		return x.AccessLogs
	}
	return nil
}

func (x *NGINXConfig) GetErrorLogs() []string {
	if x != nil {
		return x.ErrorLogs
	}
	return nil
}

func (x *NGINXConfig) GetLoadableModules() []string {
	if x != nil {
		return x.LoadableModules
	}
	return nil
}

func (x *NGINXConfig) GetDynamicModules() []string {
	if x != nil {
		return x.DynamicModules
	}
	return nil
}

// A set of runtime NGINX configuration that gets populated
type NGINXPlusConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// where the binary location is, if empty, this is a remote instance
	BinaryPath string `protobuf:"bytes,1,opt,name=binary_path,json=binaryPath,proto3" json:"binary_path,omitempty"`
	// the hostname associated with NGINX Plus
	Hostname string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// the ip address associated with NGINX Plus
	IpAddress string `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// the API information for NGINX Plus API
	Api string `protobuf:"bytes,4,opt,name=api,proto3" json:"api,omitempty"`
	// is this correct for plus?
	AccessLogs []string `protobuf:"bytes,5,rep,name=access_logs,json=accessLogs,proto3" json:"access_logs,omitempty"`
	// is this correct for plus?
	ErrorLogs []string `protobuf:"bytes,6,rep,name=error_logs,json=errorLogs,proto3" json:"error_logs,omitempty"`
	// List of NGINX potentially lodable modules (installed but not loaded).
	LoadableModules []string `protobuf:"bytes,7,rep,name=loadable_modules,json=loadableModules,proto3" json:"loadable_modules,omitempty"`
	// List of NGINX dynamic modules.
	DynamicModules []string `protobuf:"bytes,8,rep,name=dynamic_modules,json=dynamicModules,proto3" json:"dynamic_modules,omitempty"`
}

func (x *NGINXPlusConfig) Reset() {
	*x = NGINXPlusConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpi_v1_command_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NGINXPlusConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NGINXPlusConfig) ProtoMessage() {}

func (x *NGINXPlusConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mpi_v1_command_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NGINXPlusConfig.ProtoReflect.Descriptor instead.
func (*NGINXPlusConfig) Descriptor() ([]byte, []int) {
	return file_mpi_v1_command_proto_rawDescGZIP(), []int{12}
}

func (x *NGINXPlusConfig) GetBinaryPath() string {
	if x != nil {
		return x.BinaryPath
	}
	return ""
}

func (x *NGINXPlusConfig) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *NGINXPlusConfig) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *NGINXPlusConfig) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *NGINXPlusConfig) GetAccessLogs() []string {
	if x != nil {
		return x.AccessLogs
	}
	return nil
}

func (x *NGINXPlusConfig) GetErrorLogs() []string {
	if x != nil {
		return x.ErrorLogs
	}
	return nil
}

func (x *NGINXPlusConfig) GetLoadableModules() []string {
	if x != nil {
		return x.LoadableModules
	}
	return nil
}

func (x *NGINXPlusConfig) GetDynamicModules() []string {
	if x != nil {
		return x.DynamicModules
	}
	return nil
}

// A response to a CreateConnectionRequest
type CreateConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the success or failure of the CreateConnectionRequest
	Response *CommandResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	// the recommendation NGINX Agent configurations provided by the ManagementPlane
	AgentConfig *AgentConfig `protobuf:"bytes,2,opt,name=agent_config,json=agentConfig,proto3" json:"agent_config,omitempty"`
}

func (x *CreateConnectionResponse) Reset() {
	*x = CreateConnectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpi_v1_command_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConnectionResponse) ProtoMessage() {}

func (x *CreateConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mpi_v1_command_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConnectionResponse.ProtoReflect.Descriptor instead.
func (*CreateConnectionResponse) Descriptor() ([]byte, []int) {
	return file_mpi_v1_command_proto_rawDescGZIP(), []int{13}
}

func (x *CreateConnectionResponse) GetResponse() *CommandResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *CreateConnectionResponse) GetAgentConfig() *AgentConfig {
	if x != nil {
		return x.AgentConfig
	}
	return nil
}

// Report on the status of the Data Plane
type UpdateDataPlaneStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Meta-information associated with a message
	MessageMeta *MessageMeta `protobuf:"bytes,1,opt,name=message_meta,json=messageMeta,proto3" json:"message_meta,omitempty"`
	// Report on instances on the Data Plane
	Instances []*Instance `protobuf:"bytes,2,rep,name=instances,proto3" json:"instances,omitempty"`
	// The AckIndex latest message index that has been processed
	LatestMessageIndex string `protobuf:"bytes,3,opt,name=latest_message_index,json=latestMessageIndex,proto3" json:"latest_message_index,omitempty"`
}

func (x *UpdateDataPlaneStatusRequest) Reset() {
	*x = UpdateDataPlaneStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpi_v1_command_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDataPlaneStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDataPlaneStatusRequest) ProtoMessage() {}

func (x *UpdateDataPlaneStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpi_v1_command_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDataPlaneStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateDataPlaneStatusRequest) Descriptor() ([]byte, []int) {
	return file_mpi_v1_command_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateDataPlaneStatusRequest) GetMessageMeta() *MessageMeta {
	if x != nil {
		return x.MessageMeta
	}
	return nil
}

func (x *UpdateDataPlaneStatusRequest) GetInstances() []*Instance {
	if x != nil {
		return x.Instances
	}
	return nil
}

func (x *UpdateDataPlaneStatusRequest) GetLatestMessageIndex() string {
	if x != nil {
		return x.LatestMessageIndex
	}
	return ""
}

// Respond to a UpdateDataPlaneStatusRequest - intentionally empty
type UpdateDataPlaneStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateDataPlaneStatusResponse) Reset() {
	*x = UpdateDataPlaneStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpi_v1_command_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDataPlaneStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDataPlaneStatusResponse) ProtoMessage() {}

func (x *UpdateDataPlaneStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mpi_v1_command_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDataPlaneStatusResponse.ProtoReflect.Descriptor instead.
func (*UpdateDataPlaneStatusResponse) Descriptor() ([]byte, []int) {
	return file_mpi_v1_command_proto_rawDescGZIP(), []int{15}
}

// This represents an instance being reported on
type Instance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Meta-information associated with an instance
	InstanceMeta *InstanceMeta `protobuf:"bytes,1,opt,name=instance_meta,json=instanceMeta,proto3" json:"instance_meta,omitempty"`
	// Runtime configuration associated with an instance
	InstanceConfig *InstanceConfig `protobuf:"bytes,2,opt,name=instance_config,json=instanceConfig,proto3" json:"instance_config,omitempty"`
}

func (x *Instance) Reset() {
	*x = Instance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpi_v1_command_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instance) ProtoMessage() {}

func (x *Instance) ProtoReflect() protoreflect.Message {
	mi := &file_mpi_v1_command_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instance.ProtoReflect.Descriptor instead.
func (*Instance) Descriptor() ([]byte, []int) {
	return file_mpi_v1_command_proto_rawDescGZIP(), []int{16}
}

func (x *Instance) GetInstanceMeta() *InstanceMeta {
	if x != nil {
		return x.InstanceMeta
	}
	return nil
}

func (x *Instance) GetInstanceConfig() *InstanceConfig {
	if x != nil {
		return x.InstanceConfig
	}
	return nil
}

// Instance Configuration options
type InstanceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// provided actions associated with a particular instance. These are runtime based and provided by a particular version of the NGINX Agent
	Actions []*InstanceAction `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
	// Types that are assignable to Config:
	//
	//	*InstanceConfig_AgentConfig
	//	*InstanceConfig_NginxConfig
	//	*InstanceConfig_NginxPlusConfig
	Config isInstanceConfig_Config `protobuf_oneof:"config"`
}

func (x *InstanceConfig) Reset() {
	*x = InstanceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpi_v1_command_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceConfig) ProtoMessage() {}

func (x *InstanceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mpi_v1_command_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceConfig.ProtoReflect.Descriptor instead.
func (*InstanceConfig) Descriptor() ([]byte, []int) {
	return file_mpi_v1_command_proto_rawDescGZIP(), []int{17}
}

func (x *InstanceConfig) GetActions() []*InstanceAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (m *InstanceConfig) GetConfig() isInstanceConfig_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *InstanceConfig) GetAgentConfig() *AgentConfig {
	if x, ok := x.GetConfig().(*InstanceConfig_AgentConfig); ok {
		return x.AgentConfig
	}
	return nil
}

func (x *InstanceConfig) GetNginxConfig() *NGINXConfig {
	if x, ok := x.GetConfig().(*InstanceConfig_NginxConfig); ok {
		return x.NginxConfig
	}
	return nil
}

func (x *InstanceConfig) GetNginxPlusConfig() *NGINXPlusConfig {
	if x, ok := x.GetConfig().(*InstanceConfig_NginxPlusConfig); ok {
		return x.NginxPlusConfig
	}
	return nil
}

type isInstanceConfig_Config interface {
	isInstanceConfig_Config()
}

type InstanceConfig_AgentConfig struct {
	// NGINX Agent runtime configuration settings
	AgentConfig *AgentConfig `protobuf:"bytes,2,opt,name=agent_config,json=agentConfig,proto3,oneof"`
}

type InstanceConfig_NginxConfig struct {
	// NGINX runtime configuration settings like stub_status, usually read from the NGINX config or NGINX process
	NginxConfig *NGINXConfig `protobuf:"bytes,3,opt,name=nginx_config,json=nginxConfig,proto3,oneof"`
}

type InstanceConfig_NginxPlusConfig struct {
	// NGINX Plus runtime configuration settings like api value, usually read from the NGINX config, NGINX process or NGINX Plus API
	NginxPlusConfig *NGINXPlusConfig `protobuf:"bytes,4,opt,name=nginx_plus_config,json=nginxPlusConfig,proto3,oneof"`
}

func (*InstanceConfig_AgentConfig) isInstanceConfig_Config() {}

func (*InstanceConfig_NginxConfig) isInstanceConfig_Config() {}

func (*InstanceConfig_NginxPlusConfig) isInstanceConfig_Config() {}

// A set of actions that can be performed on an instance
type InstanceAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionType InstanceAction_InstanceActionType `protobuf:"varint,1,opt,name=action_type,json=actionType,proto3,enum=mpi.v1.InstanceAction_InstanceActionType" json:"action_type,omitempty"`
}

func (x *InstanceAction) Reset() {
	*x = InstanceAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpi_v1_command_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceAction) ProtoMessage() {}

func (x *InstanceAction) ProtoReflect() protoreflect.Message {
	mi := &file_mpi_v1_command_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceAction.ProtoReflect.Descriptor instead.
func (*InstanceAction) Descriptor() ([]byte, []int) {
	return file_mpi_v1_command_proto_rawDescGZIP(), []int{18}
}

func (x *InstanceAction) GetActionType() InstanceAction_InstanceActionType {
	if x != nil {
		return x.ActionType
	}
	return InstanceAction_INSTANCE_ACTION_TYPE_UNSPECIFIED
}

// Report on the health of a particular instance
type InstanceHealth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// Health status
	InstanceHealthStatus InstanceHealth_InstanceHealthStatus `protobuf:"varint,2,opt,name=instance_health_status,json=instanceHealthStatus,proto3,enum=mpi.v1.InstanceHealth_InstanceHealthStatus" json:"instance_health_status,omitempty"`
	// Provides a human readable context around why a health status is a particular state
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *InstanceHealth) Reset() {
	*x = InstanceHealth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpi_v1_command_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceHealth) ProtoMessage() {}

func (x *InstanceHealth) ProtoReflect() protoreflect.Message {
	mi := &file_mpi_v1_command_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceHealth.ProtoReflect.Descriptor instead.
func (*InstanceHealth) Descriptor() ([]byte, []int) {
	return file_mpi_v1_command_proto_rawDescGZIP(), []int{19}
}

func (x *InstanceHealth) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *InstanceHealth) GetInstanceHealthStatus() InstanceHealth_InstanceHealthStatus {
	if x != nil {
		return x.InstanceHealthStatus
	}
	return InstanceHealth_INSTANCE_HEALTH_STATUS_UNSPECIFIED
}

func (x *InstanceHealth) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Metainformation relating to the reported instance
type InstanceMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the identifier associated with the instance
	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// the types of instances possible
	InstanceType InstanceMeta_InstanceType `protobuf:"varint,2,opt,name=instance_type,json=instanceType,proto3,enum=mpi.v1.InstanceMeta_InstanceType" json:"instance_type,omitempty"`
	// the version of the instance
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *InstanceMeta) Reset() {
	*x = InstanceMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpi_v1_command_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceMeta) ProtoMessage() {}

func (x *InstanceMeta) ProtoReflect() protoreflect.Message {
	mi := &file_mpi_v1_command_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceMeta.ProtoReflect.Descriptor instead.
func (*InstanceMeta) Descriptor() ([]byte, []int) {
	return file_mpi_v1_command_proto_rawDescGZIP(), []int{20}
}

func (x *InstanceMeta) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *InstanceMeta) GetInstanceType() InstanceMeta_InstanceType {
	if x != nil {
		return x.InstanceType
	}
	return InstanceMeta_INSTANCE_TYPE_UNSPECIFIED
}

func (x *InstanceMeta) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// Health report of a set of instances
type UpdateDataPlaneHealthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Meta-information associated with a message
	MessageMeta *MessageMeta `protobuf:"bytes,1,opt,name=message_meta,json=messageMeta,proto3" json:"message_meta,omitempty"`
	// Health report of a set of instances
	InstanceHealths []*InstanceHealth `protobuf:"bytes,2,rep,name=instance_healths,json=instanceHealths,proto3" json:"instance_healths,omitempty"`
}

func (x *UpdateDataPlaneHealthRequest) Reset() {
	*x = UpdateDataPlaneHealthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpi_v1_command_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDataPlaneHealthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDataPlaneHealthRequest) ProtoMessage() {}

func (x *UpdateDataPlaneHealthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpi_v1_command_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDataPlaneHealthRequest.ProtoReflect.Descriptor instead.
func (*UpdateDataPlaneHealthRequest) Descriptor() ([]byte, []int) {
	return file_mpi_v1_command_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateDataPlaneHealthRequest) GetMessageMeta() *MessageMeta {
	if x != nil {
		return x.MessageMeta
	}
	return nil
}

func (x *UpdateDataPlaneHealthRequest) GetInstanceHealths() []*InstanceHealth {
	if x != nil {
		return x.InstanceHealths
	}
	return nil
}

// Response to a UpdateDataPlaneHealthRequest - intentionally empty
type UpdateDataPlaneHealthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateDataPlaneHealthResponse) Reset() {
	*x = UpdateDataPlaneHealthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpi_v1_command_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDataPlaneHealthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDataPlaneHealthResponse) ProtoMessage() {}

func (x *UpdateDataPlaneHealthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mpi_v1_command_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDataPlaneHealthResponse.ProtoReflect.Descriptor instead.
func (*UpdateDataPlaneHealthResponse) Descriptor() ([]byte, []int) {
	return file_mpi_v1_command_proto_rawDescGZIP(), []int{22}
}

// Reports the status of an associated command. This may be in response to a ManagementPlaneRequest
type DataPlaneResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Meta-information associated with a message
	MessageMeta *MessageMeta `protobuf:"bytes,1,opt,name=message_meta,json=messageMeta,proto3" json:"message_meta,omitempty"`
	// The command response with the associated request
	CommandResponse *CommandResponse `protobuf:"bytes,2,opt,name=command_response,json=commandResponse,proto3" json:"command_response,omitempty"`
}

func (x *DataPlaneResponse) Reset() {
	*x = DataPlaneResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpi_v1_command_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataPlaneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPlaneResponse) ProtoMessage() {}

func (x *DataPlaneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mpi_v1_command_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPlaneResponse.ProtoReflect.Descriptor instead.
func (*DataPlaneResponse) Descriptor() ([]byte, []int) {
	return file_mpi_v1_command_proto_rawDescGZIP(), []int{23}
}

func (x *DataPlaneResponse) GetMessageMeta() *MessageMeta {
	if x != nil {
		return x.MessageMeta
	}
	return nil
}

func (x *DataPlaneResponse) GetCommandResponse() *CommandResponse {
	if x != nil {
		return x.CommandResponse
	}
	return nil
}

// A Management Plane request for information, triggers an associated rpc on the DataPlane
type ManagementPlaneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Meta-information associated with a message
	MessageMeta *MessageMeta `protobuf:"bytes,1,opt,name=message_meta,json=messageMeta,proto3" json:"message_meta,omitempty"`
	// Types that are assignable to Request:
	//
	//	*ManagementPlaneRequest_StatusRequest
	//	*ManagementPlaneRequest_HealthRequest
	//	*ManagementPlaneRequest_ConfigApplyRequest
	//	*ManagementPlaneRequest_ConfigUploadRequest
	//	*ManagementPlaneRequest_ActionRequest
	//	*ManagementPlaneRequest_CommandStatusRequest
	Request isManagementPlaneRequest_Request `protobuf_oneof:"request"`
}

func (x *ManagementPlaneRequest) Reset() {
	*x = ManagementPlaneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpi_v1_command_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagementPlaneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagementPlaneRequest) ProtoMessage() {}

func (x *ManagementPlaneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpi_v1_command_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagementPlaneRequest.ProtoReflect.Descriptor instead.
func (*ManagementPlaneRequest) Descriptor() ([]byte, []int) {
	return file_mpi_v1_command_proto_rawDescGZIP(), []int{24}
}

func (x *ManagementPlaneRequest) GetMessageMeta() *MessageMeta {
	if x != nil {
		return x.MessageMeta
	}
	return nil
}

func (m *ManagementPlaneRequest) GetRequest() isManagementPlaneRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *ManagementPlaneRequest) GetStatusRequest() *StatusRequest {
	if x, ok := x.GetRequest().(*ManagementPlaneRequest_StatusRequest); ok {
		return x.StatusRequest
	}
	return nil
}

func (x *ManagementPlaneRequest) GetHealthRequest() *HealthRequest {
	if x, ok := x.GetRequest().(*ManagementPlaneRequest_HealthRequest); ok {
		return x.HealthRequest
	}
	return nil
}

func (x *ManagementPlaneRequest) GetConfigApplyRequest() *ConfigApplyRequest {
	if x, ok := x.GetRequest().(*ManagementPlaneRequest_ConfigApplyRequest); ok {
		return x.ConfigApplyRequest
	}
	return nil
}

func (x *ManagementPlaneRequest) GetConfigUploadRequest() *ConfigUploadRequest {
	if x, ok := x.GetRequest().(*ManagementPlaneRequest_ConfigUploadRequest); ok {
		return x.ConfigUploadRequest
	}
	return nil
}

func (x *ManagementPlaneRequest) GetActionRequest() *APIActionRequest {
	if x, ok := x.GetRequest().(*ManagementPlaneRequest_ActionRequest); ok {
		return x.ActionRequest
	}
	return nil
}

func (x *ManagementPlaneRequest) GetCommandStatusRequest() *CommandStatusRequest {
	if x, ok := x.GetRequest().(*ManagementPlaneRequest_CommandStatusRequest); ok {
		return x.CommandStatusRequest
	}
	return nil
}

type isManagementPlaneRequest_Request interface {
	isManagementPlaneRequest_Request()
}

type ManagementPlaneRequest_StatusRequest struct {
	// triggers a DataPlaneStatus rpc
	StatusRequest *StatusRequest `protobuf:"bytes,2,opt,name=status_request,json=statusRequest,proto3,oneof"`
}

type ManagementPlaneRequest_HealthRequest struct {
	// triggers a DataPlaneHealth rpc
	HealthRequest *HealthRequest `protobuf:"bytes,3,opt,name=health_request,json=healthRequest,proto3,oneof"`
}

type ManagementPlaneRequest_ConfigApplyRequest struct {
	// triggers a rpc GetFile(FileRequest) for overview list,
	// if overview is missing, triggers a rpc GetOverview(ConfigVersion) first
	ConfigApplyRequest *ConfigApplyRequest `protobuf:"bytes,5,opt,name=config_apply_request,json=configApplyRequest,proto3,oneof"`
}

type ManagementPlaneRequest_ConfigUploadRequest struct {
	// triggers a series of rpc UpdateFile(File) for that instances
	ConfigUploadRequest *ConfigUploadRequest `protobuf:"bytes,6,opt,name=config_upload_request,json=configUploadRequest,proto3,oneof"`
}

type ManagementPlaneRequest_ActionRequest struct {
	// triggers a DataPlaneResponse with a command_response for a particular action
	ActionRequest *APIActionRequest `protobuf:"bytes,7,opt,name=action_request,json=actionRequest,proto3,oneof"`
}

type ManagementPlaneRequest_CommandStatusRequest struct {
	// triggers a DataPlaneResponse with a command_response for a particular correlation_id
	CommandStatusRequest *CommandStatusRequest `protobuf:"bytes,8,opt,name=command_status_request,json=commandStatusRequest,proto3,oneof"`
}

func (*ManagementPlaneRequest_StatusRequest) isManagementPlaneRequest_Request() {}

func (*ManagementPlaneRequest_HealthRequest) isManagementPlaneRequest_Request() {}

func (*ManagementPlaneRequest_ConfigApplyRequest) isManagementPlaneRequest_Request() {}

func (*ManagementPlaneRequest_ConfigUploadRequest) isManagementPlaneRequest_Request() {}

func (*ManagementPlaneRequest_ActionRequest) isManagementPlaneRequest_Request() {}

func (*ManagementPlaneRequest_CommandStatusRequest) isManagementPlaneRequest_Request() {}

// Additional information associated with a StatusRequest
type StatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StatusRequest) Reset() {
	*x = StatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpi_v1_command_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusRequest) ProtoMessage() {}

func (x *StatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpi_v1_command_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusRequest.ProtoReflect.Descriptor instead.
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return file_mpi_v1_command_proto_rawDescGZIP(), []int{25}
}

// Additional information associated with a HealthRequest
type HealthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HealthRequest) Reset() {
	*x = HealthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpi_v1_command_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthRequest) ProtoMessage() {}

func (x *HealthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpi_v1_command_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthRequest.ProtoReflect.Descriptor instead.
func (*HealthRequest) Descriptor() ([]byte, []int) {
	return file_mpi_v1_command_proto_rawDescGZIP(), []int{26}
}

// Additional information associated with a ConfigApplyRequest
type ConfigApplyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the config version
	ConfigVersion *ConfigVersion `protobuf:"bytes,1,opt,name=config_version,json=configVersion,proto3" json:"config_version,omitempty"`
	// an optional set of files related to the request
	Overview *FileOverview `protobuf:"bytes,2,opt,name=overview,proto3,oneof" json:"overview,omitempty"`
}

func (x *ConfigApplyRequest) Reset() {
	*x = ConfigApplyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpi_v1_command_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigApplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigApplyRequest) ProtoMessage() {}

func (x *ConfigApplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpi_v1_command_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigApplyRequest.ProtoReflect.Descriptor instead.
func (*ConfigApplyRequest) Descriptor() ([]byte, []int) {
	return file_mpi_v1_command_proto_rawDescGZIP(), []int{27}
}

func (x *ConfigApplyRequest) GetConfigVersion() *ConfigVersion {
	if x != nil {
		return x.ConfigVersion
	}
	return nil
}

func (x *ConfigApplyRequest) GetOverview() *FileOverview {
	if x != nil {
		return x.Overview
	}
	return nil
}

type ConfigSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the config version
	ConfigVersion *ConfigVersion `protobuf:"bytes,1,opt,name=config_version,json=configVersion,proto3" json:"config_version,omitempty"`
	// an optional set of files related to the request
	Overview *FileOverview `protobuf:"bytes,2,opt,name=overview,proto3,oneof" json:"overview,omitempty"`
}

func (x *ConfigSyncRequest) Reset() {
	*x = ConfigSyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpi_v1_command_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSyncRequest) ProtoMessage() {}

func (x *ConfigSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpi_v1_command_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSyncRequest.ProtoReflect.Descriptor instead.
func (*ConfigSyncRequest) Descriptor() ([]byte, []int) {
	return file_mpi_v1_command_proto_rawDescGZIP(), []int{28}
}

func (x *ConfigSyncRequest) GetConfigVersion() *ConfigVersion {
	if x != nil {
		return x.ConfigVersion
	}
	return nil
}

func (x *ConfigSyncRequest) GetOverview() *FileOverview {
	if x != nil {
		return x.Overview
	}
	return nil
}

// Additional information associated with a ConfigUploadRequest
type ConfigUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the instance identifier
	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// an optional set of files related to the request
	Overview *FileOverview `protobuf:"bytes,2,opt,name=overview,proto3,oneof" json:"overview,omitempty"`
}

func (x *ConfigUploadRequest) Reset() {
	*x = ConfigUploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpi_v1_command_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigUploadRequest) ProtoMessage() {}

func (x *ConfigUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpi_v1_command_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigUploadRequest.ProtoReflect.Descriptor instead.
func (*ConfigUploadRequest) Descriptor() ([]byte, []int) {
	return file_mpi_v1_command_proto_rawDescGZIP(), []int{29}
}

func (x *ConfigUploadRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *ConfigUploadRequest) GetOverview() *FileOverview {
	if x != nil {
		return x.Overview
	}
	return nil
}

// Perform an associated API action on an instance
type APIActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the instance identifier
	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// the action to be performed on the instance
	Action *InstanceAction `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*APIActionRequest_DefaultAction
	Payload isAPIActionRequest_Payload `protobuf_oneof:"payload"`
}

func (x *APIActionRequest) Reset() {
	*x = APIActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpi_v1_command_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIActionRequest) ProtoMessage() {}

func (x *APIActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpi_v1_command_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIActionRequest.ProtoReflect.Descriptor instead.
func (*APIActionRequest) Descriptor() ([]byte, []int) {
	return file_mpi_v1_command_proto_rawDescGZIP(), []int{30}
}

func (x *APIActionRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *APIActionRequest) GetAction() *InstanceAction {
	if x != nil {
		return x.Action
	}
	return nil
}

func (m *APIActionRequest) GetPayload() isAPIActionRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *APIActionRequest) GetDefaultAction() *DefaultAction {
	if x, ok := x.GetPayload().(*APIActionRequest_DefaultAction); ok {
		return x.DefaultAction
	}
	return nil
}

type isAPIActionRequest_Payload interface {
	isAPIActionRequest_Payload()
}

type APIActionRequest_DefaultAction struct {
	// A default action placeholder
	DefaultAction *DefaultAction `protobuf:"bytes,3,opt,name=default_action,json=defaultAction,proto3,oneof"`
}

func (*APIActionRequest_DefaultAction) isAPIActionRequest_Payload() {}

// Request an update on a particular command
type CommandStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Meta-information associated with a message
	MessageMeta *MessageMeta `protobuf:"bytes,1,opt,name=message_meta,json=messageMeta,proto3" json:"message_meta,omitempty"`
}

func (x *CommandStatusRequest) Reset() {
	*x = CommandStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpi_v1_command_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandStatusRequest) ProtoMessage() {}

func (x *CommandStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpi_v1_command_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandStatusRequest.ProtoReflect.Descriptor instead.
func (*CommandStatusRequest) Descriptor() ([]byte, []int) {
	return file_mpi_v1_command_proto_rawDescGZIP(), []int{31}
}

func (x *CommandStatusRequest) GetMessageMeta() *MessageMeta {
	if x != nil {
		return x.MessageMeta
	}
	return nil
}

// A default action placeholder
type DefaultAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// a set of key/value pairs where the action is the key and parameters are the values used in the request
	Parameters []*structpb.Struct `protobuf:"bytes,1,rep,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *DefaultAction) Reset() {
	*x = DefaultAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpi_v1_command_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultAction) ProtoMessage() {}

func (x *DefaultAction) ProtoReflect() protoreflect.Message {
	mi := &file_mpi_v1_command_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultAction.ProtoReflect.Descriptor instead.
func (*DefaultAction) Descriptor() ([]byte, []int) {
	return file_mpi_v1_command_proto_rawDescGZIP(), []int{32}
}

func (x *DefaultAction) GetParameters() []*structpb.Struct {
	if x != nil {
		return x.Parameters
	}
	return nil
}

var File_mpi_v1_command_proto protoreflect.FileDescriptor

var file_mpi_v1_command_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6d, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x1a, 0x13,
	0x6d, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x6d, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x79, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x36, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0b, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x22, 0xe0, 0x01, 0x0a, 0x0b, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0x56, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x4b,
	0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x07,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x12, 0x2e, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x6c, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xa2,
	0x01, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x13, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x4b, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x08, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x12, 0x43, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x4b, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x12,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x20, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x4c, 0x53, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x6b, 0x65, 0x65,
	0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65,
	0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x22, 0xf9, 0x01, 0x0a, 0x06,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x46,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7f, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x54, 0x54,
	0x50, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x50, 0x43, 0x10, 0x02, 0x12, 0x18, 0x0a,
	0x14, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x49, 0x58, 0x10, 0x03, 0x22, 0x1c, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7b, 0x0a, 0x0a, 0x54, 0x4c, 0x53, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x63,
	0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x22, 0x89, 0x01, 0x0a, 0x09, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x9e,
	0x02, 0x0a, 0x0b, 0x4e, 0x47, 0x49, 0x4e, 0x58, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74,
	0x75, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x74, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6c,
	0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x22,
	0x93, 0x02, 0x0a, 0x0f, 0x4e, 0x47, 0x49, 0x4e, 0x58, 0x50, 0x6c, 0x75, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70,
	0x69, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f,
	0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f, 0x67,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x61,
	0x64, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0xb8, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6c,
	0x61, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x36, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0b, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x1f, 0x0a, 0x1d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x08,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x87, 0x02, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x0c, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x0c, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x47, 0x49, 0x4e, 0x58, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00,
	0x52, 0x0b, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x45, 0x0a,
	0x11, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x47, 0x49, 0x4e, 0x58, 0x50, 0x6c, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x0f, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x50, 0x6c, 0x75, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x98,
	0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x4a, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x0a,
	0x12, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x22, 0xe6, 0x02, 0x0a, 0x0e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x61, 0x0a,
	0x16, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e,
	0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x14, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xad, 0x01, 0x0a, 0x14, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x22, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x48, 0x45,
	0x41, 0x4c, 0x54, 0x48, 0x59, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10, 0x02, 0x12, 0x23, 0x0a,
	0x1f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x47, 0x52, 0x41, 0x44, 0x45, 0x44,
	0x10, 0x03, 0x22, 0xa9, 0x02, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x95, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12,
	0x17, 0x0a, 0x13, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x47, 0x49, 0x4e, 0x58, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x47, 0x49, 0x4e, 0x58, 0x5f,
	0x50, 0x4c, 0x55, 0x53, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x10, 0x04, 0x22, 0x99,
	0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6c, 0x61,
	0x6e, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x36, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x73, 0x22, 0x1f, 0x0a, 0x1d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x11,
	0x44, 0x61, 0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x36, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0b, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x10, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x97, 0x04,
	0x0a, 0x16, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x12, 0x3e, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3e, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0d, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4e, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x51, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x50, 0x49, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x09, 0x0a, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x0f, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x0f, 0x0a, 0x0d, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x96, 0x01, 0x0a, 0x12, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3c, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35,
	0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x76,
	0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69,
	0x65, 0x77, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69,
	0x65, 0x77, 0x22, 0x95, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x79, 0x6e,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69,
	0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x48, 0x00,
	0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x22, 0x7a, 0x0a, 0x13, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x76,
	0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x22, 0xae, 0x01, 0x0a, 0x10, 0x41, 0x50, 0x49, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0e,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x4e, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x36, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x22, 0x48, 0x0a, 0x0d, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x32, 0x87, 0x03, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a,
	0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x50, 0x6c, 0x61, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x24,
	0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a,
	0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x19, 0x2e, 0x6d, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x1e, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x2b, 0x5a, 0x29, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x70,
	0x63, 0x2f, 0x6d, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mpi_v1_command_proto_rawDescOnce sync.Once
	file_mpi_v1_command_proto_rawDescData = file_mpi_v1_command_proto_rawDesc
)

func file_mpi_v1_command_proto_rawDescGZIP() []byte {
	file_mpi_v1_command_proto_rawDescOnce.Do(func() {
		file_mpi_v1_command_proto_rawDescData = protoimpl.X.CompressGZIP(file_mpi_v1_command_proto_rawDescData)
	})
	return file_mpi_v1_command_proto_rawDescData
}

var file_mpi_v1_command_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_mpi_v1_command_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_mpi_v1_command_proto_goTypes = []interface{}{
	(Server_ConnectionType)(0),               // 0: mpi.v1.Server.ConnectionType
	(InstanceAction_InstanceActionType)(0),   // 1: mpi.v1.InstanceAction.InstanceActionType
	(InstanceHealth_InstanceHealthStatus)(0), // 2: mpi.v1.InstanceHealth.InstanceHealthStatus
	(InstanceMeta_InstanceType)(0),           // 3: mpi.v1.InstanceMeta.InstanceType
	(*CreateConnectionRequest)(nil),          // 4: mpi.v1.CreateConnectionRequest
	(*AgentConfig)(nil),                      // 5: mpi.v1.AgentConfig
	(*Command)(nil),                          // 6: mpi.v1.Command
	(*Metrics)(nil),                          // 7: mpi.v1.Metrics
	(*Source)(nil),                           // 8: mpi.v1.Source
	(*Exporter)(nil),                         // 9: mpi.v1.Exporter
	(*ConnectionSettings)(nil),               // 10: mpi.v1.ConnectionSettings
	(*Server)(nil),                           // 11: mpi.v1.Server
	(*Auth)(nil),                             // 12: mpi.v1.Auth
	(*TLSSetting)(nil),                       // 13: mpi.v1.TLSSetting
	(*KeepAlive)(nil),                        // 14: mpi.v1.KeepAlive
	(*NGINXConfig)(nil),                      // 15: mpi.v1.NGINXConfig
	(*NGINXPlusConfig)(nil),                  // 16: mpi.v1.NGINXPlusConfig
	(*CreateConnectionResponse)(nil),         // 17: mpi.v1.CreateConnectionResponse
	(*UpdateDataPlaneStatusRequest)(nil),     // 18: mpi.v1.UpdateDataPlaneStatusRequest
	(*UpdateDataPlaneStatusResponse)(nil),    // 19: mpi.v1.UpdateDataPlaneStatusResponse
	(*Instance)(nil),                         // 20: mpi.v1.Instance
	(*InstanceConfig)(nil),                   // 21: mpi.v1.InstanceConfig
	(*InstanceAction)(nil),                   // 22: mpi.v1.InstanceAction
	(*InstanceHealth)(nil),                   // 23: mpi.v1.InstanceHealth
	(*InstanceMeta)(nil),                     // 24: mpi.v1.InstanceMeta
	(*UpdateDataPlaneHealthRequest)(nil),     // 25: mpi.v1.UpdateDataPlaneHealthRequest
	(*UpdateDataPlaneHealthResponse)(nil),    // 26: mpi.v1.UpdateDataPlaneHealthResponse
	(*DataPlaneResponse)(nil),                // 27: mpi.v1.DataPlaneResponse
	(*ManagementPlaneRequest)(nil),           // 28: mpi.v1.ManagementPlaneRequest
	(*StatusRequest)(nil),                    // 29: mpi.v1.StatusRequest
	(*HealthRequest)(nil),                    // 30: mpi.v1.HealthRequest
	(*ConfigApplyRequest)(nil),               // 31: mpi.v1.ConfigApplyRequest
	(*ConfigSyncRequest)(nil),                // 32: mpi.v1.ConfigSyncRequest
	(*ConfigUploadRequest)(nil),              // 33: mpi.v1.ConfigUploadRequest
	(*APIActionRequest)(nil),                 // 34: mpi.v1.APIActionRequest
	(*CommandStatusRequest)(nil),             // 35: mpi.v1.CommandStatusRequest
	(*DefaultAction)(nil),                    // 36: mpi.v1.DefaultAction
	(*MessageMeta)(nil),                      // 37: mpi.v1.MessageMeta
	(*structpb.Struct)(nil),                  // 38: google.protobuf.Struct
	(*timestamppb.Timestamp)(nil),            // 39: google.protobuf.Timestamp
	(*CommandResponse)(nil),                  // 40: mpi.v1.CommandResponse
	(*ConfigVersion)(nil),                    // 41: mpi.v1.ConfigVersion
	(*FileOverview)(nil),                     // 42: mpi.v1.FileOverview
}
var file_mpi_v1_command_proto_depIdxs = []int32{
	37, // 0: mpi.v1.CreateConnectionRequest.message_meta:type_name -> mpi.v1.MessageMeta
	20, // 1: mpi.v1.CreateConnectionRequest.agent:type_name -> mpi.v1.Instance
	6,  // 2: mpi.v1.AgentConfig.command:type_name -> mpi.v1.Command
	7,  // 3: mpi.v1.AgentConfig.metrics:type_name -> mpi.v1.Metrics
	38, // 4: mpi.v1.AgentConfig.labels:type_name -> google.protobuf.Struct
	10, // 5: mpi.v1.Command.connection_settings:type_name -> mpi.v1.ConnectionSettings
	8,  // 6: mpi.v1.Metrics.sources:type_name -> mpi.v1.Source
	9,  // 7: mpi.v1.Metrics.exporters:type_name -> mpi.v1.Exporter
	39, // 8: mpi.v1.Source.collection_interval:type_name -> google.protobuf.Timestamp
	10, // 9: mpi.v1.Source.connection_settings:type_name -> mpi.v1.ConnectionSettings
	39, // 10: mpi.v1.Exporter.report_interval:type_name -> google.protobuf.Timestamp
	10, // 11: mpi.v1.Exporter.connection_settings:type_name -> mpi.v1.ConnectionSettings
	11, // 12: mpi.v1.ConnectionSettings.server:type_name -> mpi.v1.Server
	12, // 13: mpi.v1.ConnectionSettings.auth:type_name -> mpi.v1.Auth
	13, // 14: mpi.v1.ConnectionSettings.tls:type_name -> mpi.v1.TLSSetting
	14, // 15: mpi.v1.ConnectionSettings.keep_alive:type_name -> mpi.v1.KeepAlive
	0,  // 16: mpi.v1.Server.connection_type:type_name -> mpi.v1.Server.ConnectionType
	39, // 17: mpi.v1.KeepAlive.time:type_name -> google.protobuf.Timestamp
	40, // 18: mpi.v1.CreateConnectionResponse.response:type_name -> mpi.v1.CommandResponse
	5,  // 19: mpi.v1.CreateConnectionResponse.agent_config:type_name -> mpi.v1.AgentConfig
	37, // 20: mpi.v1.UpdateDataPlaneStatusRequest.message_meta:type_name -> mpi.v1.MessageMeta
	20, // 21: mpi.v1.UpdateDataPlaneStatusRequest.instances:type_name -> mpi.v1.Instance
	24, // 22: mpi.v1.Instance.instance_meta:type_name -> mpi.v1.InstanceMeta
	21, // 23: mpi.v1.Instance.instance_config:type_name -> mpi.v1.InstanceConfig
	22, // 24: mpi.v1.InstanceConfig.actions:type_name -> mpi.v1.InstanceAction
	5,  // 25: mpi.v1.InstanceConfig.agent_config:type_name -> mpi.v1.AgentConfig
	15, // 26: mpi.v1.InstanceConfig.nginx_config:type_name -> mpi.v1.NGINXConfig
	16, // 27: mpi.v1.InstanceConfig.nginx_plus_config:type_name -> mpi.v1.NGINXPlusConfig
	1,  // 28: mpi.v1.InstanceAction.action_type:type_name -> mpi.v1.InstanceAction.InstanceActionType
	2,  // 29: mpi.v1.InstanceHealth.instance_health_status:type_name -> mpi.v1.InstanceHealth.InstanceHealthStatus
	3,  // 30: mpi.v1.InstanceMeta.instance_type:type_name -> mpi.v1.InstanceMeta.InstanceType
	37, // 31: mpi.v1.UpdateDataPlaneHealthRequest.message_meta:type_name -> mpi.v1.MessageMeta
	23, // 32: mpi.v1.UpdateDataPlaneHealthRequest.instance_healths:type_name -> mpi.v1.InstanceHealth
	37, // 33: mpi.v1.DataPlaneResponse.message_meta:type_name -> mpi.v1.MessageMeta
	40, // 34: mpi.v1.DataPlaneResponse.command_response:type_name -> mpi.v1.CommandResponse
	37, // 35: mpi.v1.ManagementPlaneRequest.message_meta:type_name -> mpi.v1.MessageMeta
	29, // 36: mpi.v1.ManagementPlaneRequest.status_request:type_name -> mpi.v1.StatusRequest
	30, // 37: mpi.v1.ManagementPlaneRequest.health_request:type_name -> mpi.v1.HealthRequest
	31, // 38: mpi.v1.ManagementPlaneRequest.config_apply_request:type_name -> mpi.v1.ConfigApplyRequest
	33, // 39: mpi.v1.ManagementPlaneRequest.config_upload_request:type_name -> mpi.v1.ConfigUploadRequest
	34, // 40: mpi.v1.ManagementPlaneRequest.action_request:type_name -> mpi.v1.APIActionRequest
	35, // 41: mpi.v1.ManagementPlaneRequest.command_status_request:type_name -> mpi.v1.CommandStatusRequest
	41, // 42: mpi.v1.ConfigApplyRequest.config_version:type_name -> mpi.v1.ConfigVersion
	42, // 43: mpi.v1.ConfigApplyRequest.overview:type_name -> mpi.v1.FileOverview
	41, // 44: mpi.v1.ConfigSyncRequest.config_version:type_name -> mpi.v1.ConfigVersion
	42, // 45: mpi.v1.ConfigSyncRequest.overview:type_name -> mpi.v1.FileOverview
	42, // 46: mpi.v1.ConfigUploadRequest.overview:type_name -> mpi.v1.FileOverview
	22, // 47: mpi.v1.APIActionRequest.action:type_name -> mpi.v1.InstanceAction
	36, // 48: mpi.v1.APIActionRequest.default_action:type_name -> mpi.v1.DefaultAction
	37, // 49: mpi.v1.CommandStatusRequest.message_meta:type_name -> mpi.v1.MessageMeta
	38, // 50: mpi.v1.DefaultAction.parameters:type_name -> google.protobuf.Struct
	4,  // 51: mpi.v1.CommandService.CreateConnection:input_type -> mpi.v1.CreateConnectionRequest
	18, // 52: mpi.v1.CommandService.UpdateDataPlaneStatus:input_type -> mpi.v1.UpdateDataPlaneStatusRequest
	25, // 53: mpi.v1.CommandService.UpdateDataPlaneHealth:input_type -> mpi.v1.UpdateDataPlaneHealthRequest
	27, // 54: mpi.v1.CommandService.Subscribe:input_type -> mpi.v1.DataPlaneResponse
	17, // 55: mpi.v1.CommandService.CreateConnection:output_type -> mpi.v1.CreateConnectionResponse
	19, // 56: mpi.v1.CommandService.UpdateDataPlaneStatus:output_type -> mpi.v1.UpdateDataPlaneStatusResponse
	26, // 57: mpi.v1.CommandService.UpdateDataPlaneHealth:output_type -> mpi.v1.UpdateDataPlaneHealthResponse
	28, // 58: mpi.v1.CommandService.Subscribe:output_type -> mpi.v1.ManagementPlaneRequest
	55, // [55:59] is the sub-list for method output_type
	51, // [51:55] is the sub-list for method input_type
	51, // [51:51] is the sub-list for extension type_name
	51, // [51:51] is the sub-list for extension extendee
	0,  // [0:51] is the sub-list for field type_name
}

func init() { file_mpi_v1_command_proto_init() }
func file_mpi_v1_command_proto_init() {
	if File_mpi_v1_command_proto != nil {
		return
	}
	file_mpi_v1_common_proto_init()
	file_mpi_v1_file_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_mpi_v1_command_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpi_v1_command_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpi_v1_command_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpi_v1_command_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpi_v1_command_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpi_v1_command_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Exporter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpi_v1_command_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpi_v1_command_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Server); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpi_v1_command_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Auth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpi_v1_command_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLSSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpi_v1_command_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeepAlive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpi_v1_command_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NGINXConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpi_v1_command_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NGINXPlusConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpi_v1_command_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConnectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpi_v1_command_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDataPlaneStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpi_v1_command_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDataPlaneStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpi_v1_command_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpi_v1_command_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpi_v1_command_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpi_v1_command_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceHealth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpi_v1_command_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpi_v1_command_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDataPlaneHealthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpi_v1_command_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDataPlaneHealthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpi_v1_command_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataPlaneResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpi_v1_command_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagementPlaneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpi_v1_command_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpi_v1_command_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpi_v1_command_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigApplyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpi_v1_command_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigSyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpi_v1_command_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigUploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpi_v1_command_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpi_v1_command_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpi_v1_command_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mpi_v1_command_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*InstanceConfig_AgentConfig)(nil),
		(*InstanceConfig_NginxConfig)(nil),
		(*InstanceConfig_NginxPlusConfig)(nil),
	}
	file_mpi_v1_command_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*ManagementPlaneRequest_StatusRequest)(nil),
		(*ManagementPlaneRequest_HealthRequest)(nil),
		(*ManagementPlaneRequest_ConfigApplyRequest)(nil),
		(*ManagementPlaneRequest_ConfigUploadRequest)(nil),
		(*ManagementPlaneRequest_ActionRequest)(nil),
		(*ManagementPlaneRequest_CommandStatusRequest)(nil),
	}
	file_mpi_v1_command_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_mpi_v1_command_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_mpi_v1_command_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_mpi_v1_command_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*APIActionRequest_DefaultAction)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mpi_v1_command_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mpi_v1_command_proto_goTypes,
		DependencyIndexes: file_mpi_v1_command_proto_depIdxs,
		EnumInfos:         file_mpi_v1_command_proto_enumTypes,
		MessageInfos:      file_mpi_v1_command_proto_msgTypes,
	}.Build()
	File_mpi_v1_command_proto = out.File
	file_mpi_v1_command_proto_rawDesc = nil
	file_mpi_v1_command_proto_goTypes = nil
	file_mpi_v1_command_proto_depIdxs = nil
}
