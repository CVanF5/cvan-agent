// These proto definitions follow https://protobuf.dev/programming-guides/style/
// and recommendations outlined in https://static.sched.com/hosted_files/kccncna17/ad/2017%20CloudNativeCon%20-%20Mod%20gRPC%20Services.pdf

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.2
// source: command.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Connection Type enumeration
type Server_ConnectionType int32

const (
	// Default connection type
	Server_CONNECTION_TYPE_UNSPECIFIED Server_ConnectionType = 0
	// HTTP connection type
	Server_CONNECTION_TYPE_HTTP Server_ConnectionType = 1
	// gRPC connection type
	Server_CONNECTION_TYPE_GRPC Server_ConnectionType = 2
	// unix socket connection type
	Server_CONNECTION_TYPE_UNIX Server_ConnectionType = 3
)

// Enum value maps for Server_ConnectionType.
var (
	Server_ConnectionType_name = map[int32]string{
		0: "CONNECTION_TYPE_UNSPECIFIED",
		1: "CONNECTION_TYPE_HTTP",
		2: "CONNECTION_TYPE_GRPC",
		3: "CONNECTION_TYPE_UNIX",
	}
	Server_ConnectionType_value = map[string]int32{
		"CONNECTION_TYPE_UNSPECIFIED": 0,
		"CONNECTION_TYPE_HTTP":        1,
		"CONNECTION_TYPE_GRPC":        2,
		"CONNECTION_TYPE_UNIX":        3,
	}
)

func (x Server_ConnectionType) Enum() *Server_ConnectionType {
	p := new(Server_ConnectionType)
	*p = x
	return p
}

func (x Server_ConnectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Server_ConnectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_command_proto_enumTypes[0].Descriptor()
}

func (Server_ConnectionType) Type() protoreflect.EnumType {
	return &file_command_proto_enumTypes[0]
}

func (x Server_ConnectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Server_ConnectionType.Descriptor instead.
func (Server_ConnectionType) EnumDescriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{7, 0}
}

type InstanceAction_InstanceActionType int32

const (
	// Default action
	InstanceAction_INSTANCE_ACTION_TYPE_UNSPECIFIED InstanceAction_InstanceActionType = 0
)

// Enum value maps for InstanceAction_InstanceActionType.
var (
	InstanceAction_InstanceActionType_name = map[int32]string{
		0: "INSTANCE_ACTION_TYPE_UNSPECIFIED",
	}
	InstanceAction_InstanceActionType_value = map[string]int32{
		"INSTANCE_ACTION_TYPE_UNSPECIFIED": 0,
	}
)

func (x InstanceAction_InstanceActionType) Enum() *InstanceAction_InstanceActionType {
	p := new(InstanceAction_InstanceActionType)
	*p = x
	return p
}

func (x InstanceAction_InstanceActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstanceAction_InstanceActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_command_proto_enumTypes[1].Descriptor()
}

func (InstanceAction_InstanceActionType) Type() protoreflect.EnumType {
	return &file_command_proto_enumTypes[1]
}

func (x InstanceAction_InstanceActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstanceAction_InstanceActionType.Descriptor instead.
func (InstanceAction_InstanceActionType) EnumDescriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{17, 0}
}

// Health status enum
type InstanceHealth_InstancHealthStatus int32

const (
	// Unspecified status
	InstanceHealth_INSTANCE_HEALTH_STATUS_UNSPECIFIED InstanceHealth_InstancHealthStatus = 0
	// Healthy status
	InstanceHealth_INSTANCE_HEALTH_STATUS_HEALTHY InstanceHealth_InstancHealthStatus = 1
	// Unhealthy status
	InstanceHealth_INSTANCE_HEALTH_STATUS_UNHEALTHY InstanceHealth_InstancHealthStatus = 2
	// Degraded status
	InstanceHealth_INSTANCE_HEALTH_STATUS_DEGRADED InstanceHealth_InstancHealthStatus = 3
)

// Enum value maps for InstanceHealth_InstancHealthStatus.
var (
	InstanceHealth_InstancHealthStatus_name = map[int32]string{
		0: "INSTANCE_HEALTH_STATUS_UNSPECIFIED",
		1: "INSTANCE_HEALTH_STATUS_HEALTHY",
		2: "INSTANCE_HEALTH_STATUS_UNHEALTHY",
		3: "INSTANCE_HEALTH_STATUS_DEGRADED",
	}
	InstanceHealth_InstancHealthStatus_value = map[string]int32{
		"INSTANCE_HEALTH_STATUS_UNSPECIFIED": 0,
		"INSTANCE_HEALTH_STATUS_HEALTHY":     1,
		"INSTANCE_HEALTH_STATUS_UNHEALTHY":   2,
		"INSTANCE_HEALTH_STATUS_DEGRADED":    3,
	}
)

func (x InstanceHealth_InstancHealthStatus) Enum() *InstanceHealth_InstancHealthStatus {
	p := new(InstanceHealth_InstancHealthStatus)
	*p = x
	return p
}

func (x InstanceHealth_InstancHealthStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstanceHealth_InstancHealthStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_command_proto_enumTypes[2].Descriptor()
}

func (InstanceHealth_InstancHealthStatus) Type() protoreflect.EnumType {
	return &file_command_proto_enumTypes[2]
}

func (x InstanceHealth_InstancHealthStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstanceHealth_InstancHealthStatus.Descriptor instead.
func (InstanceHealth_InstancHealthStatus) EnumDescriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{18, 0}
}

// the types of instances possible
type InstanceMeta_InstanceType int32

const (
	// Unspecified instance type
	InstanceMeta_INSTANCE_TYPE_UNSPECIFIED InstanceMeta_InstanceType = 0
	// NGINX Agent
	InstanceMeta_INSTANCE_TYPE_AGENT InstanceMeta_InstanceType = 1
	// NGINX
	InstanceMeta_INSTANCE_TYPE_NGINX InstanceMeta_InstanceType = 2
	// NGINX Plus
	InstanceMeta_INSTANCE_TYPE_NGINX_PLUS InstanceMeta_InstanceType = 3
	// NGINX Unit
	InstanceMeta_INSTANCE_TYPE_UNIT InstanceMeta_InstanceType = 4
)

// Enum value maps for InstanceMeta_InstanceType.
var (
	InstanceMeta_InstanceType_name = map[int32]string{
		0: "INSTANCE_TYPE_UNSPECIFIED",
		1: "INSTANCE_TYPE_AGENT",
		2: "INSTANCE_TYPE_NGINX",
		3: "INSTANCE_TYPE_NGINX_PLUS",
		4: "INSTANCE_TYPE_UNIT",
	}
	InstanceMeta_InstanceType_value = map[string]int32{
		"INSTANCE_TYPE_UNSPECIFIED": 0,
		"INSTANCE_TYPE_AGENT":       1,
		"INSTANCE_TYPE_NGINX":       2,
		"INSTANCE_TYPE_NGINX_PLUS":  3,
		"INSTANCE_TYPE_UNIT":        4,
	}
)

func (x InstanceMeta_InstanceType) Enum() *InstanceMeta_InstanceType {
	p := new(InstanceMeta_InstanceType)
	*p = x
	return p
}

func (x InstanceMeta_InstanceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstanceMeta_InstanceType) Descriptor() protoreflect.EnumDescriptor {
	return file_command_proto_enumTypes[3].Descriptor()
}

func (InstanceMeta_InstanceType) Type() protoreflect.EnumType {
	return &file_command_proto_enumTypes[3]
}

func (x InstanceMeta_InstanceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstanceMeta_InstanceType.Descriptor instead.
func (InstanceMeta_InstanceType) EnumDescriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{19, 0}
}

// The connection request is an intial handshake to establish a connection, sending NGINX Agent instance information
type ConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Meta-information associated with a message
	MessageMetadata *MessageRequest `protobuf:"bytes,1,opt,name=message_metadata,json=messageMetadata,proto3" json:"message_metadata,omitempty"`
	// instance information associated with the NGINX Agent
	Agent *Instance `protobuf:"bytes,2,opt,name=agent,proto3" json:"agent,omitempty"`
}

func (x *ConnectionRequest) Reset() {
	*x = ConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionRequest) ProtoMessage() {}

func (x *ConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionRequest.ProtoReflect.Descriptor instead.
func (*ConnectionRequest) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{0}
}

func (x *ConnectionRequest) GetMessageMetadata() *MessageRequest {
	if x != nil {
		return x.MessageMetadata
	}
	return nil
}

func (x *ConnectionRequest) GetAgent() *Instance {
	if x != nil {
		return x.Agent
	}
	return nil
}

// This contains a series of NGINX Agent configurations
type AgentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Command server settings
	Command *Command `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	// Metrics server settings
	Metrics *Metrics `protobuf:"bytes,2,opt,name=metrics,proto3" json:"metrics,omitempty"`
	// A series of key/value pairs to add more data to the NGINX Agent instance
	Labels []*structpb.Struct `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty"`
	// A list of features that the NGINX Agent has
	Features []string `protobuf:"bytes,4,rep,name=features,proto3" json:"features,omitempty"`
	// Message buffer size, maximum not acknowledged messages from the subscribe perspective
	MessageBufferSize string `protobuf:"bytes,5,opt,name=message_buffer_size,json=messageBufferSize,proto3" json:"message_buffer_size,omitempty"` //
}

func (x *AgentConfig) Reset() {
	*x = AgentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentConfig) ProtoMessage() {}

func (x *AgentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentConfig.ProtoReflect.Descriptor instead.
func (*AgentConfig) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{1}
}

func (x *AgentConfig) GetCommand() *Command {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *AgentConfig) GetMetrics() *Metrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *AgentConfig) GetLabels() []*structpb.Struct {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *AgentConfig) GetFeatures() []string {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *AgentConfig) GetMessageBufferSize() string {
	if x != nil {
		return x.MessageBufferSize
	}
	return ""
}

// The command settings, associated with messaging from an external source
type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The connection and security settingss for the command server
	ConnectionSettings *ConnectionSettings `protobuf:"bytes,1,opt,name=connection_settings,json=connectionSettings,proto3" json:"connection_settings,omitempty"`
}

func (x *Command) Reset() {
	*x = Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{2}
}

func (x *Command) GetConnectionSettings() *ConnectionSettings {
	if x != nil {
		return x.ConnectionSettings
	}
	return nil
}

// The metrics settings associated with orgins (sources) of the metrics and destinations (exporter)
type Metrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The connection and security settingss for the sources
	Sources []*Source `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
	// The connection and security settingss for the exporters server
	Exporters []*Exporter `protobuf:"bytes,2,rep,name=exporters,proto3" json:"exporters,omitempty"`
	// the local buffer size that we will cache if connectivity issues exist
	BulkSize string `protobuf:"bytes,3,opt,name=bulk_size,json=bulkSize,proto3" json:"bulk_size,omitempty"`
}

func (x *Metrics) Reset() {
	*x = Metrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metrics) ProtoMessage() {}

func (x *Metrics) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metrics.ProtoReflect.Descriptor instead.
func (*Metrics) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{3}
}

func (x *Metrics) GetSources() []*Source {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *Metrics) GetExporters() []*Exporter {
	if x != nil {
		return x.Exporters
	}
	return nil
}

func (x *Metrics) GetBulkSize() string {
	if x != nil {
		return x.BulkSize
	}
	return ""
}

// A source configuration
type Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// how often to collect data from a particular source. In google.protobuf.Timestamp format
	CollectionInterval *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=collection_interval,json=collectionInterval,proto3" json:"collection_interval,omitempty"`
	// connection information to connect to a particular source
	ConnectionSettings *ConnectionSettings `protobuf:"bytes,2,opt,name=connection_settings,json=connectionSettings,proto3" json:"connection_settings,omitempty"`
}

func (x *Source) Reset() {
	*x = Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{4}
}

func (x *Source) GetCollectionInterval() *timestamppb.Timestamp {
	if x != nil {
		return x.CollectionInterval
	}
	return nil
}

func (x *Source) GetConnectionSettings() *ConnectionSettings {
	if x != nil {
		return x.ConnectionSettings
	}
	return nil
}

// A destination configuration
type Exporter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// how often to report in google.protobuf.Timestamp format
	ReportInterval *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=report_interval,json=reportInterval,proto3" json:"report_interval,omitempty"`
	// connection information to send data to a particular destination
	ConnectionSettings *ConnectionSettings `protobuf:"bytes,2,opt,name=connection_settings,json=connectionSettings,proto3" json:"connection_settings,omitempty"`
}

func (x *Exporter) Reset() {
	*x = Exporter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Exporter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exporter) ProtoMessage() {}

func (x *Exporter) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Exporter.ProtoReflect.Descriptor instead.
func (*Exporter) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{5}
}

func (x *Exporter) GetReportInterval() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportInterval
	}
	return nil
}

func (x *Exporter) GetConnectionSettings() *ConnectionSettings {
	if x != nil {
		return x.ConnectionSettings
	}
	return nil
}

// A set of connection information and it's associated auth, tls and backoff configurations
type ConnectionSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Server settings that include connection information
	Server *Server `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	// Authentication settings
	Auth *Auth `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
	// Optional TLS settings
	Tls *TLSSetting `protobuf:"bytes,3,opt,name=tls,proto3" json:"tls,omitempty"`
	// backoff settings associated with this connection
	Backoff *Backoff `protobuf:"bytes,4,opt,name=backoff,proto3" json:"backoff,omitempty"`
}

func (x *ConnectionSettings) Reset() {
	*x = ConnectionSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionSettings) ProtoMessage() {}

func (x *ConnectionSettings) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionSettings.ProtoReflect.Descriptor instead.
func (*ConnectionSettings) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{6}
}

func (x *ConnectionSettings) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *ConnectionSettings) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *ConnectionSettings) GetTls() *TLSSetting {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *ConnectionSettings) GetBackoff() *Backoff {
	if x != nil {
		return x.Backoff
	}
	return nil
}

// Server settings like hostname
type Server struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the host information
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// the port information
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// Specific connection type
	ConnectionType Server_ConnectionType `protobuf:"varint,3,opt,name=connection_type,json=connectionType,proto3,enum=f5.nginx.agent.api.grpc.mpi.v1.Server_ConnectionType" json:"connection_type,omitempty"`
}

func (x *Server) Reset() {
	*x = Server{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server) ProtoMessage() {}

func (x *Server) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server.ProtoReflect.Descriptor instead.
func (*Server) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{7}
}

func (x *Server) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Server) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Server) GetConnectionType() Server_ConnectionType {
	if x != nil {
		return x.ConnectionType
	}
	return Server_CONNECTION_TYPE_UNSPECIFIED
}

// Authentication settings
type Auth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A token
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *Auth) Reset() {
	*x = Auth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Auth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Auth) ProtoMessage() {}

func (x *Auth) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Auth.ProtoReflect.Descriptor instead.
func (*Auth) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{8}
}

func (x *Auth) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type TLSSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// enable tls
	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// tls cert
	Cert string `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
	// tls key
	Key string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// certificate authoirty cert
	Ca string `protobuf:"bytes,4,opt,name=ca,proto3" json:"ca,omitempty"`
	// enable verification of a server's certificate chain and host name
	SkipVerify bool `protobuf:"varint,5,opt,name=skip_verify,json=skipVerify,proto3" json:"skip_verify,omitempty"`
}

func (x *TLSSetting) Reset() {
	*x = TLSSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSSetting) ProtoMessage() {}

func (x *TLSSetting) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSSetting.ProtoReflect.Descriptor instead.
func (*TLSSetting) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{9}
}

func (x *TLSSetting) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *TLSSetting) GetCert() string {
	if x != nil {
		return x.Cert
	}
	return ""
}

func (x *TLSSetting) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *TLSSetting) GetCa() string {
	if x != nil {
		return x.Ca
	}
	return ""
}

func (x *TLSSetting) GetSkipVerify() bool {
	if x != nil {
		return x.SkipVerify
	}
	return false
}

// backoff settings
type Backoff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// First backoff time interval in seconds
	InitialInterval int64 `protobuf:"varint,1,opt,name=initial_interval,json=initialInterval,proto3" json:"initial_interval,omitempty"`
	// Random value used to create range around next backoff interval
	RandomizationFactor float64 `protobuf:"fixed64,2,opt,name=randomization_factor,json=randomizationFactor,proto3" json:"randomization_factor,omitempty"`
	// Value to be multiplied with current backoff interval
	Multiplier float64 `protobuf:"fixed64,3,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
	// Max interval in seconds between two retries
	MaxInterval int64 `protobuf:"varint,4,opt,name=max_interval,json=maxInterval,proto3" json:"max_interval,omitempty"`
	// Elapsed time in seconds after which backoff stops.
	// It never stops if max_elapsed_time == 0.
	MaxElapsedTime int64 `protobuf:"varint,5,opt,name=max_elapsed_time,json=maxElapsedTime,proto3" json:"max_elapsed_time,omitempty"`
}

func (x *Backoff) Reset() {
	*x = Backoff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backoff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backoff) ProtoMessage() {}

func (x *Backoff) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backoff.ProtoReflect.Descriptor instead.
func (*Backoff) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{10}
}

func (x *Backoff) GetInitialInterval() int64 {
	if x != nil {
		return x.InitialInterval
	}
	return 0
}

func (x *Backoff) GetRandomizationFactor() float64 {
	if x != nil {
		return x.RandomizationFactor
	}
	return 0
}

func (x *Backoff) GetMultiplier() float64 {
	if x != nil {
		return x.Multiplier
	}
	return 0
}

func (x *Backoff) GetMaxInterval() int64 {
	if x != nil {
		return x.MaxInterval
	}
	return 0
}

func (x *Backoff) GetMaxElapsedTime() int64 {
	if x != nil {
		return x.MaxElapsedTime
	}
	return 0
}

// A set of runtime NGINX configuration that gets populated
type NGINXConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// where the binary location is, if empty, this is a remote instance
	BinaryPath string `protobuf:"bytes,1,opt,name=binary_path,json=binaryPath,proto3" json:"binary_path,omitempty"`
	// the hostname associated with NGINX
	Hostname string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// the ip address associated with NGINX
	IpAddress string `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// the stub status API location
	StubStatus string `protobuf:"bytes,4,opt,name=stub_status,json=stubStatus,proto3" json:"stub_status,omitempty"`
	// a list of access_logs
	AccessLogs []string `protobuf:"bytes,5,rep,name=access_logs,json=accessLogs,proto3" json:"access_logs,omitempty"`
	// a list of error_logs
	ErrorLogs []string `protobuf:"bytes,6,rep,name=error_logs,json=errorLogs,proto3" json:"error_logs,omitempty"`
}

func (x *NGINXConfig) Reset() {
	*x = NGINXConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NGINXConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NGINXConfig) ProtoMessage() {}

func (x *NGINXConfig) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NGINXConfig.ProtoReflect.Descriptor instead.
func (*NGINXConfig) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{11}
}

func (x *NGINXConfig) GetBinaryPath() string {
	if x != nil {
		return x.BinaryPath
	}
	return ""
}

func (x *NGINXConfig) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *NGINXConfig) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *NGINXConfig) GetStubStatus() string {
	if x != nil {
		return x.StubStatus
	}
	return ""
}

func (x *NGINXConfig) GetAccessLogs() []string {
	if x != nil {
		return x.AccessLogs
	}
	return nil
}

func (x *NGINXConfig) GetErrorLogs() []string {
	if x != nil {
		return x.ErrorLogs
	}
	return nil
}

// A set of runtime NGINX configuration that gets populated
type NGINXPlusConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// where the binary location is, if empty, this is a remote instance
	BinaryPath string `protobuf:"bytes,1,opt,name=binary_path,json=binaryPath,proto3" json:"binary_path,omitempty"`
	// the hostname associated with NGINX Plus
	Hostname string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// the ip address associated with NGINX Plus
	IpAddress string `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// the API information for NGINX Plus API
	Api string `protobuf:"bytes,4,opt,name=api,proto3" json:"api,omitempty"`
	// is this correct for plus?
	AccessLogs []string `protobuf:"bytes,5,rep,name=access_logs,json=accessLogs,proto3" json:"access_logs,omitempty"`
	// is this correct for plus?
	ErrorLogs []string `protobuf:"bytes,6,rep,name=error_logs,json=errorLogs,proto3" json:"error_logs,omitempty"`
}

func (x *NGINXPlusConfig) Reset() {
	*x = NGINXPlusConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NGINXPlusConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NGINXPlusConfig) ProtoMessage() {}

func (x *NGINXPlusConfig) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NGINXPlusConfig.ProtoReflect.Descriptor instead.
func (*NGINXPlusConfig) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{12}
}

func (x *NGINXPlusConfig) GetBinaryPath() string {
	if x != nil {
		return x.BinaryPath
	}
	return ""
}

func (x *NGINXPlusConfig) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *NGINXPlusConfig) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *NGINXPlusConfig) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *NGINXPlusConfig) GetAccessLogs() []string {
	if x != nil {
		return x.AccessLogs
	}
	return nil
}

func (x *NGINXPlusConfig) GetErrorLogs() []string {
	if x != nil {
		return x.ErrorLogs
	}
	return nil
}

// A response to a ConnectionRequest
type ConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the success or failure of the ConnectionRequest
	Response *CommandResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	// the recommendation NGINX Agent configurations provided by the ManagementPlane
	AgentConfig *AgentConfig `protobuf:"bytes,2,opt,name=agent_config,json=agentConfig,proto3" json:"agent_config,omitempty"`
}

func (x *ConnectionResponse) Reset() {
	*x = ConnectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionResponse) ProtoMessage() {}

func (x *ConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionResponse.ProtoReflect.Descriptor instead.
func (*ConnectionResponse) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{13}
}

func (x *ConnectionResponse) GetResponse() *CommandResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ConnectionResponse) GetAgentConfig() *AgentConfig {
	if x != nil {
		return x.AgentConfig
	}
	return nil
}

// Report on the status of the Data Plane
type DataPlaneStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Meta-information associated with a message
	MessageMetadata *MessageRequest `protobuf:"bytes,1,opt,name=message_metadata,json=messageMetadata,proto3" json:"message_metadata,omitempty"`
	// Report on instances on the Data Plane
	Instances []*Instance `protobuf:"bytes,2,rep,name=instances,proto3" json:"instances,omitempty"`
	// The AckIndex latest message index that has been processed
	LatestMessageIndex string `protobuf:"bytes,3,opt,name=latest_message_index,json=latestMessageIndex,proto3" json:"latest_message_index,omitempty"`
}

func (x *DataPlaneStatus) Reset() {
	*x = DataPlaneStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataPlaneStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPlaneStatus) ProtoMessage() {}

func (x *DataPlaneStatus) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPlaneStatus.ProtoReflect.Descriptor instead.
func (*DataPlaneStatus) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{14}
}

func (x *DataPlaneStatus) GetMessageMetadata() *MessageRequest {
	if x != nil {
		return x.MessageMetadata
	}
	return nil
}

func (x *DataPlaneStatus) GetInstances() []*Instance {
	if x != nil {
		return x.Instances
	}
	return nil
}

func (x *DataPlaneStatus) GetLatestMessageIndex() string {
	if x != nil {
		return x.LatestMessageIndex
	}
	return ""
}

// This represents an instance being reported on
type Instance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Meta-information associated with an instance
	InstanceMeta *InstanceMeta `protobuf:"bytes,1,opt,name=instance_meta,json=instanceMeta,proto3" json:"instance_meta,omitempty"`
	// Runtime configuration associated with an instance
	InstanceConfig *InstanceConfig `protobuf:"bytes,2,opt,name=instance_config,json=instanceConfig,proto3" json:"instance_config,omitempty"`
}

func (x *Instance) Reset() {
	*x = Instance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instance) ProtoMessage() {}

func (x *Instance) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instance.ProtoReflect.Descriptor instead.
func (*Instance) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{15}
}

func (x *Instance) GetInstanceMeta() *InstanceMeta {
	if x != nil {
		return x.InstanceMeta
	}
	return nil
}

func (x *Instance) GetInstanceConfig() *InstanceConfig {
	if x != nil {
		return x.InstanceConfig
	}
	return nil
}

// Instance Configuration options
type InstanceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// provided actions associated with a particular instance. These are runtime based and provided by a particular version of the NGINX Agent
	Actions []*InstanceAction `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
	// Types that are assignable to Config:
	//
	//	*InstanceConfig_AgentConfig
	//	*InstanceConfig_NginxConfig
	//	*InstanceConfig_NginxPlusConfig
	Config isInstanceConfig_Config `protobuf_oneof:"config"`
}

func (x *InstanceConfig) Reset() {
	*x = InstanceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceConfig) ProtoMessage() {}

func (x *InstanceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceConfig.ProtoReflect.Descriptor instead.
func (*InstanceConfig) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{16}
}

func (x *InstanceConfig) GetActions() []*InstanceAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (m *InstanceConfig) GetConfig() isInstanceConfig_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *InstanceConfig) GetAgentConfig() *AgentConfig {
	if x, ok := x.GetConfig().(*InstanceConfig_AgentConfig); ok {
		return x.AgentConfig
	}
	return nil
}

func (x *InstanceConfig) GetNginxConfig() *NGINXConfig {
	if x, ok := x.GetConfig().(*InstanceConfig_NginxConfig); ok {
		return x.NginxConfig
	}
	return nil
}

func (x *InstanceConfig) GetNginxPlusConfig() *NGINXPlusConfig {
	if x, ok := x.GetConfig().(*InstanceConfig_NginxPlusConfig); ok {
		return x.NginxPlusConfig
	}
	return nil
}

type isInstanceConfig_Config interface {
	isInstanceConfig_Config()
}

type InstanceConfig_AgentConfig struct {
	// NGINX Agent runtime configuration settings
	AgentConfig *AgentConfig `protobuf:"bytes,2,opt,name=agent_config,json=agentConfig,proto3,oneof"`
}

type InstanceConfig_NginxConfig struct {
	// NGINX runtime configuration settings like stub_status, usually read from the NGINX config or NGINX process
	NginxConfig *NGINXConfig `protobuf:"bytes,3,opt,name=nginx_config,json=nginxConfig,proto3,oneof"`
}

type InstanceConfig_NginxPlusConfig struct {
	// NGINX Plus runtime configuration settings like api value, usually read from the NGINX config, NGINX process or NGINX Plus API
	NginxPlusConfig *NGINXPlusConfig `protobuf:"bytes,4,opt,name=nginx_plus_config,json=nginxPlusConfig,proto3,oneof"`
}

func (*InstanceConfig_AgentConfig) isInstanceConfig_Config() {}

func (*InstanceConfig_NginxConfig) isInstanceConfig_Config() {}

func (*InstanceConfig_NginxPlusConfig) isInstanceConfig_Config() {}

// A set of actions that can be performed on an instance
type InstanceAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionType InstanceAction_InstanceActionType `protobuf:"varint,1,opt,name=action_type,json=actionType,proto3,enum=f5.nginx.agent.api.grpc.mpi.v1.InstanceAction_InstanceActionType" json:"action_type,omitempty"`
}

func (x *InstanceAction) Reset() {
	*x = InstanceAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceAction) ProtoMessage() {}

func (x *InstanceAction) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceAction.ProtoReflect.Descriptor instead.
func (*InstanceAction) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{17}
}

func (x *InstanceAction) GetActionType() InstanceAction_InstanceActionType {
	if x != nil {
		return x.ActionType
	}
	return InstanceAction_INSTANCE_ACTION_TYPE_UNSPECIFIED
}

// Report on the health of a particular instance
type InstanceHealth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// Health status
	InstanceHealthStatus InstanceHealth_InstancHealthStatus `protobuf:"varint,2,opt,name=instance_health_status,json=instanceHealthStatus,proto3,enum=f5.nginx.agent.api.grpc.mpi.v1.InstanceHealth_InstancHealthStatus" json:"instance_health_status,omitempty"`
	// Provides a human readable context around why a health status is a particular state
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *InstanceHealth) Reset() {
	*x = InstanceHealth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceHealth) ProtoMessage() {}

func (x *InstanceHealth) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceHealth.ProtoReflect.Descriptor instead.
func (*InstanceHealth) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{18}
}

func (x *InstanceHealth) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *InstanceHealth) GetInstanceHealthStatus() InstanceHealth_InstancHealthStatus {
	if x != nil {
		return x.InstanceHealthStatus
	}
	return InstanceHealth_INSTANCE_HEALTH_STATUS_UNSPECIFIED
}

func (x *InstanceHealth) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Metainformation relating to the reported instance
type InstanceMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the identifier associated with the instance
	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// the types of instances possible
	InstanceType InstanceMeta_InstanceType `protobuf:"varint,2,opt,name=instance_type,json=instanceType,proto3,enum=f5.nginx.agent.api.grpc.mpi.v1.InstanceMeta_InstanceType" json:"instance_type,omitempty"`
	// the version of the instance
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *InstanceMeta) Reset() {
	*x = InstanceMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceMeta) ProtoMessage() {}

func (x *InstanceMeta) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceMeta.ProtoReflect.Descriptor instead.
func (*InstanceMeta) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{19}
}

func (x *InstanceMeta) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *InstanceMeta) GetInstanceType() InstanceMeta_InstanceType {
	if x != nil {
		return x.InstanceType
	}
	return InstanceMeta_INSTANCE_TYPE_UNSPECIFIED
}

func (x *InstanceMeta) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// Health report of a set of instances
type DataPlaneHealth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Meta-information associated with a message
	MessageMetadata *MessageRequest `protobuf:"bytes,1,opt,name=message_metadata,json=messageMetadata,proto3" json:"message_metadata,omitempty"`
	// Health report of a set of instances
	InstanceHealth []*InstanceHealth `protobuf:"bytes,2,rep,name=instance_health,json=instanceHealth,proto3" json:"instance_health,omitempty"`
}

func (x *DataPlaneHealth) Reset() {
	*x = DataPlaneHealth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataPlaneHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPlaneHealth) ProtoMessage() {}

func (x *DataPlaneHealth) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPlaneHealth.ProtoReflect.Descriptor instead.
func (*DataPlaneHealth) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{20}
}

func (x *DataPlaneHealth) GetMessageMetadata() *MessageRequest {
	if x != nil {
		return x.MessageMetadata
	}
	return nil
}

func (x *DataPlaneHealth) GetInstanceHealth() []*InstanceHealth {
	if x != nil {
		return x.InstanceHealth
	}
	return nil
}

// Reports the status of an associated command. This may be in response to a ManagementPlaneMessage request
type DataPlaneMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Meta-information associated with a message
	MessageMetadata *MessageRequest `protobuf:"bytes,1,opt,name=message_metadata,json=messageMetadata,proto3" json:"message_metadata,omitempty"`
	// The command response with the associated request
	CommandResponse *CommandResponse `protobuf:"bytes,2,opt,name=command_response,json=commandResponse,proto3" json:"command_response,omitempty"`
}

func (x *DataPlaneMessage) Reset() {
	*x = DataPlaneMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataPlaneMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPlaneMessage) ProtoMessage() {}

func (x *DataPlaneMessage) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPlaneMessage.ProtoReflect.Descriptor instead.
func (*DataPlaneMessage) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{21}
}

func (x *DataPlaneMessage) GetMessageMetadata() *MessageRequest {
	if x != nil {
		return x.MessageMetadata
	}
	return nil
}

func (x *DataPlaneMessage) GetCommandResponse() *CommandResponse {
	if x != nil {
		return x.CommandResponse
	}
	return nil
}

// A Management Plane request for information, triggers an associated rpc on the DataPlane
type ManagementPlaneMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Meta-information associated with a message
	MessageMetadata *MessageRequest `protobuf:"bytes,1,opt,name=message_metadata,json=messageMetadata,proto3" json:"message_metadata,omitempty"`
	// Types that are assignable to Request:
	//
	//	*ManagementPlaneMessage_StatusRequest
	//	*ManagementPlaneMessage_HealthRequest
	//	*ManagementPlaneMessage_ConfigApplyRequest
	//	*ManagementPlaneMessage_ConfigUploadRequest
	//	*ManagementPlaneMessage_ConfigSyncRequest
	//	*ManagementPlaneMessage_ActionRequest
	//	*ManagementPlaneMessage_CommandStatusRequest
	Request isManagementPlaneMessage_Request `protobuf_oneof:"request"`
}

func (x *ManagementPlaneMessage) Reset() {
	*x = ManagementPlaneMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagementPlaneMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagementPlaneMessage) ProtoMessage() {}

func (x *ManagementPlaneMessage) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagementPlaneMessage.ProtoReflect.Descriptor instead.
func (*ManagementPlaneMessage) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{22}
}

func (x *ManagementPlaneMessage) GetMessageMetadata() *MessageRequest {
	if x != nil {
		return x.MessageMetadata
	}
	return nil
}

func (m *ManagementPlaneMessage) GetRequest() isManagementPlaneMessage_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *ManagementPlaneMessage) GetStatusRequest() *StatusRequest {
	if x, ok := x.GetRequest().(*ManagementPlaneMessage_StatusRequest); ok {
		return x.StatusRequest
	}
	return nil
}

func (x *ManagementPlaneMessage) GetHealthRequest() *HealthRequest {
	if x, ok := x.GetRequest().(*ManagementPlaneMessage_HealthRequest); ok {
		return x.HealthRequest
	}
	return nil
}

func (x *ManagementPlaneMessage) GetConfigApplyRequest() *ConfigApplyRequest {
	if x, ok := x.GetRequest().(*ManagementPlaneMessage_ConfigApplyRequest); ok {
		return x.ConfigApplyRequest
	}
	return nil
}

func (x *ManagementPlaneMessage) GetConfigUploadRequest() *ConfigUploadRequest {
	if x, ok := x.GetRequest().(*ManagementPlaneMessage_ConfigUploadRequest); ok {
		return x.ConfigUploadRequest
	}
	return nil
}

func (x *ManagementPlaneMessage) GetConfigSyncRequest() *ConfigSyncRequest {
	if x, ok := x.GetRequest().(*ManagementPlaneMessage_ConfigSyncRequest); ok {
		return x.ConfigSyncRequest
	}
	return nil
}

func (x *ManagementPlaneMessage) GetActionRequest() *ActionRequest {
	if x, ok := x.GetRequest().(*ManagementPlaneMessage_ActionRequest); ok {
		return x.ActionRequest
	}
	return nil
}

func (x *ManagementPlaneMessage) GetCommandStatusRequest() *CommandStatusRequest {
	if x, ok := x.GetRequest().(*ManagementPlaneMessage_CommandStatusRequest); ok {
		return x.CommandStatusRequest
	}
	return nil
}

type isManagementPlaneMessage_Request interface {
	isManagementPlaneMessage_Request()
}

type ManagementPlaneMessage_StatusRequest struct {
	// triggers a DataPlaneStatus rpc
	StatusRequest *StatusRequest `protobuf:"bytes,2,opt,name=status_request,json=statusRequest,proto3,oneof"`
}

type ManagementPlaneMessage_HealthRequest struct {
	// triggers a DataPlaneHealth rpc
	HealthRequest *HealthRequest `protobuf:"bytes,3,opt,name=health_request,json=healthRequest,proto3,oneof"`
}

type ManagementPlaneMessage_ConfigApplyRequest struct {
	// triggers a rpc GetFile(FileRequest) for overview list,
	// if overview is missing, triggers a rpc Overview(ConfigVersion) first
	ConfigApplyRequest *ConfigApplyRequest `protobuf:"bytes,5,opt,name=config_apply_request,json=configApplyRequest,proto3,oneof"`
}

type ManagementPlaneMessage_ConfigUploadRequest struct {
	// triggers a series of rpc SendFile(File) for that instances
	ConfigUploadRequest *ConfigUploadRequest `protobuf:"bytes,6,opt,name=config_upload_request,json=configUploadRequest,proto3,oneof"`
}

type ManagementPlaneMessage_ConfigSyncRequest struct {
	// triggers a reconciliation of  with a command_response for a particular action
	ConfigSyncRequest *ConfigSyncRequest `protobuf:"bytes,7,opt,name=config_sync_request,json=configSyncRequest,proto3,oneof"`
}

type ManagementPlaneMessage_ActionRequest struct {
	// triggers a DataPlaneMessage with a command_response for a particular action
	ActionRequest *ActionRequest `protobuf:"bytes,8,opt,name=action_request,json=actionRequest,proto3,oneof"`
}

type ManagementPlaneMessage_CommandStatusRequest struct {
	// triggers a DataPlaneMessage with a command_response for a particular correlation_id
	CommandStatusRequest *CommandStatusRequest `protobuf:"bytes,9,opt,name=command_status_request,json=commandStatusRequest,proto3,oneof"`
}

func (*ManagementPlaneMessage_StatusRequest) isManagementPlaneMessage_Request() {}

func (*ManagementPlaneMessage_HealthRequest) isManagementPlaneMessage_Request() {}

func (*ManagementPlaneMessage_ConfigApplyRequest) isManagementPlaneMessage_Request() {}

func (*ManagementPlaneMessage_ConfigUploadRequest) isManagementPlaneMessage_Request() {}

func (*ManagementPlaneMessage_ConfigSyncRequest) isManagementPlaneMessage_Request() {}

func (*ManagementPlaneMessage_ActionRequest) isManagementPlaneMessage_Request() {}

func (*ManagementPlaneMessage_CommandStatusRequest) isManagementPlaneMessage_Request() {}

// Additional information associated with a StatusRequest
type StatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StatusRequest) Reset() {
	*x = StatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusRequest) ProtoMessage() {}

func (x *StatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusRequest.ProtoReflect.Descriptor instead.
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{23}
}

// Additional information associated with a HealthRequest
type HealthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HealthRequest) Reset() {
	*x = HealthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthRequest) ProtoMessage() {}

func (x *HealthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthRequest.ProtoReflect.Descriptor instead.
func (*HealthRequest) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{24}
}

// Additional information associated with a ConfigApplyRequest
type ConfigApplyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the config version
	ConfigVersion *ConfigVersion `protobuf:"bytes,1,opt,name=config_version,json=configVersion,proto3" json:"config_version,omitempty"`
	// an optional set of files related to the request
	Overview *FileOverview `protobuf:"bytes,2,opt,name=overview,proto3" json:"overview,omitempty"` // optional
}

func (x *ConfigApplyRequest) Reset() {
	*x = ConfigApplyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigApplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigApplyRequest) ProtoMessage() {}

func (x *ConfigApplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigApplyRequest.ProtoReflect.Descriptor instead.
func (*ConfigApplyRequest) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{25}
}

func (x *ConfigApplyRequest) GetConfigVersion() *ConfigVersion {
	if x != nil {
		return x.ConfigVersion
	}
	return nil
}

func (x *ConfigApplyRequest) GetOverview() *FileOverview {
	if x != nil {
		return x.Overview
	}
	return nil
}

type ConfigSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the config version
	ConfigVersion *ConfigVersion `protobuf:"bytes,1,opt,name=config_version,json=configVersion,proto3" json:"config_version,omitempty"`
	// an optional set of files related to the request
	Overview *FileOverview `protobuf:"bytes,2,opt,name=overview,proto3" json:"overview,omitempty"`
}

func (x *ConfigSyncRequest) Reset() {
	*x = ConfigSyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSyncRequest) ProtoMessage() {}

func (x *ConfigSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSyncRequest.ProtoReflect.Descriptor instead.
func (*ConfigSyncRequest) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{26}
}

func (x *ConfigSyncRequest) GetConfigVersion() *ConfigVersion {
	if x != nil {
		return x.ConfigVersion
	}
	return nil
}

func (x *ConfigSyncRequest) GetOverview() *FileOverview {
	if x != nil {
		return x.Overview
	}
	return nil
}

// Additional information associated with a ConfigUploadRequest
type ConfigUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the instance identifier
	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *ConfigUploadRequest) Reset() {
	*x = ConfigUploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigUploadRequest) ProtoMessage() {}

func (x *ConfigUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigUploadRequest.ProtoReflect.Descriptor instead.
func (*ConfigUploadRequest) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{27}
}

func (x *ConfigUploadRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

// Perform an associated action on an instance
type ActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the instance identifier
	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// the action to be performed on the instance
	Action *InstanceAction `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*ActionRequest_DefaultAction
	Payload isActionRequest_Payload `protobuf_oneof:"payload"`
}

func (x *ActionRequest) Reset() {
	*x = ActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionRequest) ProtoMessage() {}

func (x *ActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionRequest.ProtoReflect.Descriptor instead.
func (*ActionRequest) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{28}
}

func (x *ActionRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *ActionRequest) GetAction() *InstanceAction {
	if x != nil {
		return x.Action
	}
	return nil
}

func (m *ActionRequest) GetPayload() isActionRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *ActionRequest) GetDefaultAction() *DefaultAction {
	if x, ok := x.GetPayload().(*ActionRequest_DefaultAction); ok {
		return x.DefaultAction
	}
	return nil
}

type isActionRequest_Payload interface {
	isActionRequest_Payload()
}

type ActionRequest_DefaultAction struct {
	// A default action placeholder
	DefaultAction *DefaultAction `protobuf:"bytes,3,opt,name=default_action,json=defaultAction,proto3,oneof"`
}

func (*ActionRequest_DefaultAction) isActionRequest_Payload() {}

// Request an update on a particular command
type CommandStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Meta-information associated with a message
	MessageMetadata *MessageRequest `protobuf:"bytes,1,opt,name=message_metadata,json=messageMetadata,proto3" json:"message_metadata,omitempty"`
}

func (x *CommandStatusRequest) Reset() {
	*x = CommandStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandStatusRequest) ProtoMessage() {}

func (x *CommandStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandStatusRequest.ProtoReflect.Descriptor instead.
func (*CommandStatusRequest) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{29}
}

func (x *CommandStatusRequest) GetMessageMetadata() *MessageRequest {
	if x != nil {
		return x.MessageMetadata
	}
	return nil
}

// A default action placeholder
type DefaultAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params []*structpb.Struct `protobuf:"bytes,1,rep,name=params,proto3" json:"params,omitempty"`
}

func (x *DefaultAction) Reset() {
	*x = DefaultAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultAction) ProtoMessage() {}

func (x *DefaultAction) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultAction.ProtoReflect.Descriptor instead.
func (*DefaultAction) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{30}
}

func (x *DefaultAction) GetParams() []*structpb.Struct {
	if x != nil {
		return x.Params
	}
	return nil
}

var File_command_proto protoreflect.FileDescriptor

var file_command_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x1a,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb5, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x10, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a,
	0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66,
	0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x22, 0x90, 0x02,
	0x0a, 0x0b, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x41, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x41, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0x6e, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x63, 0x0a, 0x13, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67,
	0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x12, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x22, 0xb0, 0x01, 0x0a, 0x07, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x40, 0x0a, 0x07,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x46,
	0x0a, 0x09, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x6c, 0x6b, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4b,
	0x0a, 0x13, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x63, 0x0a, 0x13, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67,
	0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x12, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x22, 0xb4, 0x01, 0x0a, 0x08, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x43, 0x0a,
	0x0f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x63, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x8f, 0x02, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3e,
	0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x38,
	0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x66,
	0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x3c, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x4c, 0x53, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x12, 0x41, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66,
	0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69,
	0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66,
	0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x22, 0x91, 0x02, 0x0a, 0x06, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x5e, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7f, 0x0a, 0x0e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x50,
	0x43, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x58, 0x10, 0x03, 0x22, 0x1c, 0x0a,
	0x04, 0x41, 0x75, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7b, 0x0a, 0x0a, 0x54,
	0x4c, 0x53, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x63, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x70, 0x5f,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x6b,
	0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x22, 0xd4, 0x01, 0x0a, 0x07, 0x42, 0x61, 0x63,
	0x6b, 0x6f, 0x66, 0x66, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x31, 0x0a, 0x14, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x72,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x6c, 0x61,
	0x70, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x6d, 0x61, 0x78, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xca, 0x01, 0x0a, 0x0b, 0x4e, 0x47, 0x49, 0x4e, 0x58, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x1f, 0x0a, 0x0b, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x75, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x74, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x22, 0xbf, 0x01, 0x0a,
	0x0f, 0x4e, 0x47, 0x49, 0x4e, 0x58, 0x50, 0x6c, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x70, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x22, 0xb8,
	0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69,
	0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0c, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xed, 0x01, 0x0a, 0x0f, 0x44, 0x61,
	0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x60, 0x0a,
	0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69,
	0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x46, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xb6, 0x01, 0x0a, 0x08, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x57, 0x0a, 0x0f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0xe7, 0x02, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x48, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e,
	0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x50, 0x0a, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x50, 0x0a, 0x0c, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69,
	0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x47, 0x49, 0x4e, 0x58, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x5d, 0x0a, 0x11, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x5f, 0x70, 0x6c, 0x75,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x47, 0x49, 0x4e, 0x58, 0x50, 0x6c, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x0f, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x50, 0x6c, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xb0, 0x01, 0x0a,
	0x0e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x62, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x3a, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x22,
	0xfc, 0x02, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x78, 0x0a, 0x16, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xac, 0x01, 0x0a, 0x13, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x22, 0x0a, 0x1e, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x4c,
	0x54, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48,
	0x59, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x47, 0x52, 0x41, 0x44, 0x45, 0x44, 0x10, 0x03, 0x22, 0xc1,
	0x02, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x5e, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69,
	0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x95, 0x01, 0x0a, 0x0c, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e,
	0x54, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x47, 0x49, 0x4e, 0x58, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x47,
	0x49, 0x4e, 0x58, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54,
	0x10, 0x04, 0x22, 0xcc, 0x01, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x60, 0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x57, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x22, 0xd7, 0x01, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x60, 0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x61, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb3, 0x06, 0x0a, 0x16,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x60, 0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x56, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x56, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67,
	0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x66, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e,
	0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x69, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x63, 0x0a, 0x13, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67,
	0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x56, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67,
	0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6c, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67,
	0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x0f, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x0f, 0x0a, 0x0d, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xbe, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x0e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69,
	0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72,
	0x76, 0x69, 0x65, 0x77, 0x22, 0xbd, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x0e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69,
	0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72,
	0x76, 0x69, 0x65, 0x77, 0x22, 0x36, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0xdb, 0x01, 0x0a,
	0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x46, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x78, 0x0a, 0x14, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x60, 0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x66,
	0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x40, 0x0a, 0x0d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x32, 0xab, 0x03, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x72, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x12, 0x31, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69,
	0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69,
	0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6c, 0x61,
	0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x53, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x2f, 0x2e, 0x66,
	0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x12, 0x30, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x36, 0x2e, 0x66, 0x35, 0x2e, 0x6e, 0x67, 0x69, 0x6e,
	0x78, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x6d, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00,
	0x28, 0x01, 0x30, 0x01, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6e, 0x67, 0x69, 0x6e, 0x78, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x76,
	0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x6d, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_command_proto_rawDescOnce sync.Once
	file_command_proto_rawDescData = file_command_proto_rawDesc
)

func file_command_proto_rawDescGZIP() []byte {
	file_command_proto_rawDescOnce.Do(func() {
		file_command_proto_rawDescData = protoimpl.X.CompressGZIP(file_command_proto_rawDescData)
	})
	return file_command_proto_rawDescData
}

var file_command_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_command_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_command_proto_goTypes = []interface{}{
	(Server_ConnectionType)(0),              // 0: f5.nginx.agent.api.grpc.mpi.v1.Server.ConnectionType
	(InstanceAction_InstanceActionType)(0),  // 1: f5.nginx.agent.api.grpc.mpi.v1.InstanceAction.InstanceActionType
	(InstanceHealth_InstancHealthStatus)(0), // 2: f5.nginx.agent.api.grpc.mpi.v1.InstanceHealth.InstancHealthStatus
	(InstanceMeta_InstanceType)(0),          // 3: f5.nginx.agent.api.grpc.mpi.v1.InstanceMeta.InstanceType
	(*ConnectionRequest)(nil),               // 4: f5.nginx.agent.api.grpc.mpi.v1.ConnectionRequest
	(*AgentConfig)(nil),                     // 5: f5.nginx.agent.api.grpc.mpi.v1.AgentConfig
	(*Command)(nil),                         // 6: f5.nginx.agent.api.grpc.mpi.v1.Command
	(*Metrics)(nil),                         // 7: f5.nginx.agent.api.grpc.mpi.v1.Metrics
	(*Source)(nil),                          // 8: f5.nginx.agent.api.grpc.mpi.v1.Source
	(*Exporter)(nil),                        // 9: f5.nginx.agent.api.grpc.mpi.v1.Exporter
	(*ConnectionSettings)(nil),              // 10: f5.nginx.agent.api.grpc.mpi.v1.ConnectionSettings
	(*Server)(nil),                          // 11: f5.nginx.agent.api.grpc.mpi.v1.Server
	(*Auth)(nil),                            // 12: f5.nginx.agent.api.grpc.mpi.v1.Auth
	(*TLSSetting)(nil),                      // 13: f5.nginx.agent.api.grpc.mpi.v1.TLSSetting
	(*Backoff)(nil),                         // 14: f5.nginx.agent.api.grpc.mpi.v1.Backoff
	(*NGINXConfig)(nil),                     // 15: f5.nginx.agent.api.grpc.mpi.v1.NGINXConfig
	(*NGINXPlusConfig)(nil),                 // 16: f5.nginx.agent.api.grpc.mpi.v1.NGINXPlusConfig
	(*ConnectionResponse)(nil),              // 17: f5.nginx.agent.api.grpc.mpi.v1.ConnectionResponse
	(*DataPlaneStatus)(nil),                 // 18: f5.nginx.agent.api.grpc.mpi.v1.DataPlaneStatus
	(*Instance)(nil),                        // 19: f5.nginx.agent.api.grpc.mpi.v1.Instance
	(*InstanceConfig)(nil),                  // 20: f5.nginx.agent.api.grpc.mpi.v1.InstanceConfig
	(*InstanceAction)(nil),                  // 21: f5.nginx.agent.api.grpc.mpi.v1.InstanceAction
	(*InstanceHealth)(nil),                  // 22: f5.nginx.agent.api.grpc.mpi.v1.InstanceHealth
	(*InstanceMeta)(nil),                    // 23: f5.nginx.agent.api.grpc.mpi.v1.InstanceMeta
	(*DataPlaneHealth)(nil),                 // 24: f5.nginx.agent.api.grpc.mpi.v1.DataPlaneHealth
	(*DataPlaneMessage)(nil),                // 25: f5.nginx.agent.api.grpc.mpi.v1.DataPlaneMessage
	(*ManagementPlaneMessage)(nil),          // 26: f5.nginx.agent.api.grpc.mpi.v1.ManagementPlaneMessage
	(*StatusRequest)(nil),                   // 27: f5.nginx.agent.api.grpc.mpi.v1.StatusRequest
	(*HealthRequest)(nil),                   // 28: f5.nginx.agent.api.grpc.mpi.v1.HealthRequest
	(*ConfigApplyRequest)(nil),              // 29: f5.nginx.agent.api.grpc.mpi.v1.ConfigApplyRequest
	(*ConfigSyncRequest)(nil),               // 30: f5.nginx.agent.api.grpc.mpi.v1.ConfigSyncRequest
	(*ConfigUploadRequest)(nil),             // 31: f5.nginx.agent.api.grpc.mpi.v1.ConfigUploadRequest
	(*ActionRequest)(nil),                   // 32: f5.nginx.agent.api.grpc.mpi.v1.ActionRequest
	(*CommandStatusRequest)(nil),            // 33: f5.nginx.agent.api.grpc.mpi.v1.CommandStatusRequest
	(*DefaultAction)(nil),                   // 34: f5.nginx.agent.api.grpc.mpi.v1.DefaultAction
	(*MessageRequest)(nil),                  // 35: f5.nginx.agent.api.grpc.mpi.v1.common.MessageRequest
	(*structpb.Struct)(nil),                 // 36: google.protobuf.Struct
	(*timestamppb.Timestamp)(nil),           // 37: google.protobuf.Timestamp
	(*CommandResponse)(nil),                 // 38: f5.nginx.agent.api.grpc.mpi.v1.common.CommandResponse
	(*ConfigVersion)(nil),                   // 39: f5.nginx.agent.api.grpc.mpi.v1.file.ConfigVersion
	(*FileOverview)(nil),                    // 40: f5.nginx.agent.api.grpc.mpi.v1.file.FileOverview
	(*emptypb.Empty)(nil),                   // 41: google.protobuf.Empty
}
var file_command_proto_depIdxs = []int32{
	35, // 0: f5.nginx.agent.api.grpc.mpi.v1.ConnectionRequest.message_metadata:type_name -> f5.nginx.agent.api.grpc.mpi.v1.common.MessageRequest
	19, // 1: f5.nginx.agent.api.grpc.mpi.v1.ConnectionRequest.agent:type_name -> f5.nginx.agent.api.grpc.mpi.v1.Instance
	6,  // 2: f5.nginx.agent.api.grpc.mpi.v1.AgentConfig.command:type_name -> f5.nginx.agent.api.grpc.mpi.v1.Command
	7,  // 3: f5.nginx.agent.api.grpc.mpi.v1.AgentConfig.metrics:type_name -> f5.nginx.agent.api.grpc.mpi.v1.Metrics
	36, // 4: f5.nginx.agent.api.grpc.mpi.v1.AgentConfig.labels:type_name -> google.protobuf.Struct
	10, // 5: f5.nginx.agent.api.grpc.mpi.v1.Command.connection_settings:type_name -> f5.nginx.agent.api.grpc.mpi.v1.ConnectionSettings
	8,  // 6: f5.nginx.agent.api.grpc.mpi.v1.Metrics.sources:type_name -> f5.nginx.agent.api.grpc.mpi.v1.Source
	9,  // 7: f5.nginx.agent.api.grpc.mpi.v1.Metrics.exporters:type_name -> f5.nginx.agent.api.grpc.mpi.v1.Exporter
	37, // 8: f5.nginx.agent.api.grpc.mpi.v1.Source.collection_interval:type_name -> google.protobuf.Timestamp
	10, // 9: f5.nginx.agent.api.grpc.mpi.v1.Source.connection_settings:type_name -> f5.nginx.agent.api.grpc.mpi.v1.ConnectionSettings
	37, // 10: f5.nginx.agent.api.grpc.mpi.v1.Exporter.report_interval:type_name -> google.protobuf.Timestamp
	10, // 11: f5.nginx.agent.api.grpc.mpi.v1.Exporter.connection_settings:type_name -> f5.nginx.agent.api.grpc.mpi.v1.ConnectionSettings
	11, // 12: f5.nginx.agent.api.grpc.mpi.v1.ConnectionSettings.server:type_name -> f5.nginx.agent.api.grpc.mpi.v1.Server
	12, // 13: f5.nginx.agent.api.grpc.mpi.v1.ConnectionSettings.auth:type_name -> f5.nginx.agent.api.grpc.mpi.v1.Auth
	13, // 14: f5.nginx.agent.api.grpc.mpi.v1.ConnectionSettings.tls:type_name -> f5.nginx.agent.api.grpc.mpi.v1.TLSSetting
	14, // 15: f5.nginx.agent.api.grpc.mpi.v1.ConnectionSettings.backoff:type_name -> f5.nginx.agent.api.grpc.mpi.v1.Backoff
	0,  // 16: f5.nginx.agent.api.grpc.mpi.v1.Server.connection_type:type_name -> f5.nginx.agent.api.grpc.mpi.v1.Server.ConnectionType
	38, // 17: f5.nginx.agent.api.grpc.mpi.v1.ConnectionResponse.response:type_name -> f5.nginx.agent.api.grpc.mpi.v1.common.CommandResponse
	5,  // 18: f5.nginx.agent.api.grpc.mpi.v1.ConnectionResponse.agent_config:type_name -> f5.nginx.agent.api.grpc.mpi.v1.AgentConfig
	35, // 19: f5.nginx.agent.api.grpc.mpi.v1.DataPlaneStatus.message_metadata:type_name -> f5.nginx.agent.api.grpc.mpi.v1.common.MessageRequest
	19, // 20: f5.nginx.agent.api.grpc.mpi.v1.DataPlaneStatus.instances:type_name -> f5.nginx.agent.api.grpc.mpi.v1.Instance
	23, // 21: f5.nginx.agent.api.grpc.mpi.v1.Instance.instance_meta:type_name -> f5.nginx.agent.api.grpc.mpi.v1.InstanceMeta
	20, // 22: f5.nginx.agent.api.grpc.mpi.v1.Instance.instance_config:type_name -> f5.nginx.agent.api.grpc.mpi.v1.InstanceConfig
	21, // 23: f5.nginx.agent.api.grpc.mpi.v1.InstanceConfig.actions:type_name -> f5.nginx.agent.api.grpc.mpi.v1.InstanceAction
	5,  // 24: f5.nginx.agent.api.grpc.mpi.v1.InstanceConfig.agent_config:type_name -> f5.nginx.agent.api.grpc.mpi.v1.AgentConfig
	15, // 25: f5.nginx.agent.api.grpc.mpi.v1.InstanceConfig.nginx_config:type_name -> f5.nginx.agent.api.grpc.mpi.v1.NGINXConfig
	16, // 26: f5.nginx.agent.api.grpc.mpi.v1.InstanceConfig.nginx_plus_config:type_name -> f5.nginx.agent.api.grpc.mpi.v1.NGINXPlusConfig
	1,  // 27: f5.nginx.agent.api.grpc.mpi.v1.InstanceAction.action_type:type_name -> f5.nginx.agent.api.grpc.mpi.v1.InstanceAction.InstanceActionType
	2,  // 28: f5.nginx.agent.api.grpc.mpi.v1.InstanceHealth.instance_health_status:type_name -> f5.nginx.agent.api.grpc.mpi.v1.InstanceHealth.InstancHealthStatus
	3,  // 29: f5.nginx.agent.api.grpc.mpi.v1.InstanceMeta.instance_type:type_name -> f5.nginx.agent.api.grpc.mpi.v1.InstanceMeta.InstanceType
	35, // 30: f5.nginx.agent.api.grpc.mpi.v1.DataPlaneHealth.message_metadata:type_name -> f5.nginx.agent.api.grpc.mpi.v1.common.MessageRequest
	22, // 31: f5.nginx.agent.api.grpc.mpi.v1.DataPlaneHealth.instance_health:type_name -> f5.nginx.agent.api.grpc.mpi.v1.InstanceHealth
	35, // 32: f5.nginx.agent.api.grpc.mpi.v1.DataPlaneMessage.message_metadata:type_name -> f5.nginx.agent.api.grpc.mpi.v1.common.MessageRequest
	38, // 33: f5.nginx.agent.api.grpc.mpi.v1.DataPlaneMessage.command_response:type_name -> f5.nginx.agent.api.grpc.mpi.v1.common.CommandResponse
	35, // 34: f5.nginx.agent.api.grpc.mpi.v1.ManagementPlaneMessage.message_metadata:type_name -> f5.nginx.agent.api.grpc.mpi.v1.common.MessageRequest
	27, // 35: f5.nginx.agent.api.grpc.mpi.v1.ManagementPlaneMessage.status_request:type_name -> f5.nginx.agent.api.grpc.mpi.v1.StatusRequest
	28, // 36: f5.nginx.agent.api.grpc.mpi.v1.ManagementPlaneMessage.health_request:type_name -> f5.nginx.agent.api.grpc.mpi.v1.HealthRequest
	29, // 37: f5.nginx.agent.api.grpc.mpi.v1.ManagementPlaneMessage.config_apply_request:type_name -> f5.nginx.agent.api.grpc.mpi.v1.ConfigApplyRequest
	31, // 38: f5.nginx.agent.api.grpc.mpi.v1.ManagementPlaneMessage.config_upload_request:type_name -> f5.nginx.agent.api.grpc.mpi.v1.ConfigUploadRequest
	30, // 39: f5.nginx.agent.api.grpc.mpi.v1.ManagementPlaneMessage.config_sync_request:type_name -> f5.nginx.agent.api.grpc.mpi.v1.ConfigSyncRequest
	32, // 40: f5.nginx.agent.api.grpc.mpi.v1.ManagementPlaneMessage.action_request:type_name -> f5.nginx.agent.api.grpc.mpi.v1.ActionRequest
	33, // 41: f5.nginx.agent.api.grpc.mpi.v1.ManagementPlaneMessage.command_status_request:type_name -> f5.nginx.agent.api.grpc.mpi.v1.CommandStatusRequest
	39, // 42: f5.nginx.agent.api.grpc.mpi.v1.ConfigApplyRequest.config_version:type_name -> f5.nginx.agent.api.grpc.mpi.v1.file.ConfigVersion
	40, // 43: f5.nginx.agent.api.grpc.mpi.v1.ConfigApplyRequest.overview:type_name -> f5.nginx.agent.api.grpc.mpi.v1.file.FileOverview
	39, // 44: f5.nginx.agent.api.grpc.mpi.v1.ConfigSyncRequest.config_version:type_name -> f5.nginx.agent.api.grpc.mpi.v1.file.ConfigVersion
	40, // 45: f5.nginx.agent.api.grpc.mpi.v1.ConfigSyncRequest.overview:type_name -> f5.nginx.agent.api.grpc.mpi.v1.file.FileOverview
	21, // 46: f5.nginx.agent.api.grpc.mpi.v1.ActionRequest.action:type_name -> f5.nginx.agent.api.grpc.mpi.v1.InstanceAction
	34, // 47: f5.nginx.agent.api.grpc.mpi.v1.ActionRequest.default_action:type_name -> f5.nginx.agent.api.grpc.mpi.v1.DefaultAction
	35, // 48: f5.nginx.agent.api.grpc.mpi.v1.CommandStatusRequest.message_metadata:type_name -> f5.nginx.agent.api.grpc.mpi.v1.common.MessageRequest
	36, // 49: f5.nginx.agent.api.grpc.mpi.v1.DefaultAction.params:type_name -> google.protobuf.Struct
	4,  // 50: f5.nginx.agent.api.grpc.mpi.v1.CommandService.Connect:input_type -> f5.nginx.agent.api.grpc.mpi.v1.ConnectionRequest
	18, // 51: f5.nginx.agent.api.grpc.mpi.v1.CommandService.Status:input_type -> f5.nginx.agent.api.grpc.mpi.v1.DataPlaneStatus
	24, // 52: f5.nginx.agent.api.grpc.mpi.v1.CommandService.Health:input_type -> f5.nginx.agent.api.grpc.mpi.v1.DataPlaneHealth
	25, // 53: f5.nginx.agent.api.grpc.mpi.v1.CommandService.Subscribe:input_type -> f5.nginx.agent.api.grpc.mpi.v1.DataPlaneMessage
	17, // 54: f5.nginx.agent.api.grpc.mpi.v1.CommandService.Connect:output_type -> f5.nginx.agent.api.grpc.mpi.v1.ConnectionResponse
	41, // 55: f5.nginx.agent.api.grpc.mpi.v1.CommandService.Status:output_type -> google.protobuf.Empty
	41, // 56: f5.nginx.agent.api.grpc.mpi.v1.CommandService.Health:output_type -> google.protobuf.Empty
	26, // 57: f5.nginx.agent.api.grpc.mpi.v1.CommandService.Subscribe:output_type -> f5.nginx.agent.api.grpc.mpi.v1.ManagementPlaneMessage
	54, // [54:58] is the sub-list for method output_type
	50, // [50:54] is the sub-list for method input_type
	50, // [50:50] is the sub-list for extension type_name
	50, // [50:50] is the sub-list for extension extendee
	0,  // [0:50] is the sub-list for field type_name
}

func init() { file_command_proto_init() }
func file_command_proto_init() {
	if File_command_proto != nil {
		return
	}
	file_common_proto_init()
	file_file_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_command_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Exporter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Server); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Auth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLSSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backoff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NGINXConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NGINXPlusConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataPlaneStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceHealth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataPlaneHealth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataPlaneMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagementPlaneMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigApplyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigSyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigUploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_command_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*InstanceConfig_AgentConfig)(nil),
		(*InstanceConfig_NginxConfig)(nil),
		(*InstanceConfig_NginxPlusConfig)(nil),
	}
	file_command_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*ManagementPlaneMessage_StatusRequest)(nil),
		(*ManagementPlaneMessage_HealthRequest)(nil),
		(*ManagementPlaneMessage_ConfigApplyRequest)(nil),
		(*ManagementPlaneMessage_ConfigUploadRequest)(nil),
		(*ManagementPlaneMessage_ConfigSyncRequest)(nil),
		(*ManagementPlaneMessage_ActionRequest)(nil),
		(*ManagementPlaneMessage_CommandStatusRequest)(nil),
	}
	file_command_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*ActionRequest_DefaultAction)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_command_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_command_proto_goTypes,
		DependencyIndexes: file_command_proto_depIdxs,
		EnumInfos:         file_command_proto_enumTypes,
		MessageInfos:      file_command_proto_msgTypes,
	}.Build()
	File_command_proto = out.File
	file_command_proto_rawDesc = nil
	file_command_proto_goTypes = nil
	file_command_proto_depIdxs = nil
}
